"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.isUniqueSidebars = void 0;

var _createBreakpoints = require("@material-ui/core/styles/createBreakpoints");

var _utils = require("../../utils");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var isUniqueSidebars = function isUniqueSidebars(sidebars) {
  var keys = [];
  var isUnique = true;
  sidebars.forEach(function (_ref) {
    var id = _ref.id;

    if (!id) {
      throw new Error('[Layout] - All Sidebar must have id');
    }

    if (keys.includes(id)) {
      isUnique = false;
    } else {
      keys.push(id);
    }
  });
  return isUnique;
};

exports.isUniqueSidebars = isUniqueSidebars;

var _default = function _default() {
  var initialMapById = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var hiddenById = {};
  var sidebarIds = Object.keys(initialMapById);

  var mapById = _extends({}, initialMapById);

  var addConfig = function addConfig(breakpoint, config) {
    if (!sidebarIds.includes(config.id)) {
      sidebarIds.push(config.id);
    }

    if (!mapById[config.id]) {
      mapById[config.id] = {};
    }

    mapById[config.id][breakpoint] = config;
  };

  return {
    create: function create(id, props) {
      hiddenById[id] = [];

      var Registry = function Registry() {
        return {
          registerPersistentConfig: function registerPersistentConfig(breakpoint, config) {
            addConfig(breakpoint, _extends(_extends(_extends({}, config), props), {}, {
              id: id,
              variant: 'persistent'
            }));
            return this;
          },
          registerPermanentConfig: function registerPermanentConfig(breakpoint, config) {
            addConfig(breakpoint, _extends(_extends(_extends({}, config), props), {}, {
              id: id,
              variant: 'permanent'
            }));
            return this;
          },
          registerTemporaryConfig: function registerTemporaryConfig(breakpoint, config) {
            addConfig(breakpoint, _extends(_extends(_extends({}, config), props), {}, {
              id: id,
              variant: 'temporary'
            }));
            return this;
          }
        };
      };

      return Registry();
    },
    update: function update(id, updater) {
      if (mapById[id]) {
        updater(mapById[id]);
      } else {
        console.warn("No sidebar to update. id: ".concat(id));
      }
    },
    hide: function hide(id, breakpoints) {
      if (typeof breakpoints === 'boolean') {
        hiddenById[id] = breakpoints ? _createBreakpoints.keys : [];
      } else {
        if (!hiddenById[id]) hiddenById[id] = [];
        hiddenById[id] = breakpoints;
      }
    },
    getData: function getData() {
      var attachedMapById = (0, _utils.attachHiddenToMapById)(mapById, hiddenById);
      return {
        configMap: (0, _utils.normalizeMapById)(attachedMapById),
        configMapById: attachedMapById,
        sidebarIds: sidebarIds,
        hiddenById: hiddenById
      };
    },
    getSidebarIds: function getSidebarIds() {
      return sidebarIds;
    },
    debug: function debug() {
      if (process.env.NODE_ENV !== 'production') {
        sidebarIds.forEach(function (id) {
          console.group('EdgeSidebar:', "\"".concat(id, "\""));
          console.table(mapById[id]);
          console.groupEnd();
        });
      }
    }
  };
};

exports["default"] = _default;