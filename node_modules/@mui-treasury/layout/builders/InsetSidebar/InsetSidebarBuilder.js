"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = require("../../utils");

var _createBreakpoints = require("@material-ui/core/styles/createBreakpoints");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _default = function _default() {
  var initialMapById = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var hiddenById = {};

  var mapById = _extends({}, initialMapById);

  var addConfig = function addConfig(bp, config) {
    if (!mapById[config.id]) {
      mapById[config.id] = {};
    }

    mapById[config.id][bp] = config;
  };

  return {
    create: function create(id, props) {
      // InsetSidebar can be multiples, id is needed
      var Registry = function Registry() {
        return {
          registerStickyConfig: function registerStickyConfig(breakpoint, config) {
            addConfig(breakpoint, _extends(_extends(_extends({}, config), props), {}, {
              id: id,
              variant: 'sticky'
            }));
            return this;
          },
          registerAbsoluteConfig: function registerAbsoluteConfig(breakpoint, config) {
            addConfig(breakpoint, _extends(_extends(_extends({}, config), props), {}, {
              id: id,
              variant: 'absolute'
            }));
            return this;
          },
          registerFixedConfig: function registerFixedConfig(breakpoint, config) {
            addConfig(breakpoint, _extends(_extends(_extends({}, config), props), {}, {
              id: id,
              variant: 'fixed'
            }));
            return this;
          }
        };
      };

      return Registry();
    },
    update: function update(id, updater) {
      if (mapById[id]) {
        updater(mapById[id]);
      } else {
        console.warn("No sidebar to update. id: ".concat(id));
      }
    },
    hide: function hide(id, breakpoints) {
      if (typeof breakpoints === 'boolean') {
        hiddenById[id] = breakpoints ? _createBreakpoints.keys : [];
      } else {
        if (!hiddenById[id]) hiddenById[id] = [];
        hiddenById[id] = breakpoints;
      }
    },
    getData: function getData() {
      var attachedMapById = (0, _utils.attachHiddenToMapById)(mapById, hiddenById);
      return {
        configMap: (0, _utils.normalizeMapById)(attachedMapById),
        configMapById: attachedMapById
      };
    },
    debug: function debug() {
      if (process.env.NODE_ENV !== 'production') {
        Object.keys(mapById).forEach(function (id) {
          console.group('InsetSidebar:', "\"".concat(id, "\""));
          console.table(mapById[id]);
          console.groupEnd();
        });
      }
    }
  };
};

exports["default"] = _default;