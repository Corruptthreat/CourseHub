function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { keys } from "@material-ui/core/styles/createBreakpoints";
import createDisplayNone from "./createDisplayNone";
export var sortBreakpoints = function sortBreakpoints(breakpoints) {
  return breakpoints.sort(function (a, b) {
    return keys.indexOf(a) - keys.indexOf(b);
  });
};
export var combineSiblings = function combineSiblings(siblings) {
  return siblings.reduce(function (result, curr) {
    return [].concat(_toConsumableArray(result), _toConsumableArray(Object.keys(curr)));
  }, []);
};
export var isLowerBreakpointFromSibling = function isLowerBreakpointFromSibling(selfBreakpoints, siblingsBreakpoints, bp) {
  var keysUtilBreakpoint = keys.slice(0, keys.indexOf(bp));
  var isSibling = false;
  var isSelf = false;
  keysUtilBreakpoint.reverse().forEach(function (v) {
    if (!isSibling && !isSelf) {
      if (siblingsBreakpoints.includes(v)) {
        isSibling = true;
      }

      if (selfBreakpoints.includes(v)) {
        isSelf = true;
      }
    }
  });
  return isSibling;
};
export var getHiddenRange = function getHiddenRange(self, siblings) {
  var selfBreakpoints = sortBreakpoints(Object.keys(self));
  var siblingsBreakpoints = sortBreakpoints(combineSiblings(siblings));
  var found = false;
  var result = [];
  keys.forEach(function (bp) {
    if (selfBreakpoints.includes(bp) || siblingsBreakpoints.includes(bp)) {
      found = true; // logic continue

      if (selfBreakpoints.includes(bp) && siblingsBreakpoints.includes(bp)) {
        console.warn("[Warning]! seems like there are multiple configs for breakpoint: ".concat(bp, ", this can cause unexpected behavior. Please make sure that you only have one variant config for each breakpoint."));
      }

      if (siblingsBreakpoints.includes(bp)) {
        result.push(bp);
      }
    } else {
      if (!found) {
        result.push(bp);
      } else if (isLowerBreakpointFromSibling(selfBreakpoints, siblingsBreakpoints, bp)) {
        result.push(bp);
      }
    }
  });
  return result;
};

var createHiddenStyles = function createHiddenStyles(self) {
  var siblings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var breakpoints = arguments.length > 2 ? arguments[2] : undefined;
  if (!self || !breakpoints) return {};
  var hiddenRange = getHiddenRange(self, siblings);
  return createDisplayNone(hiddenRange, breakpoints);
};

export default createHiddenStyles;