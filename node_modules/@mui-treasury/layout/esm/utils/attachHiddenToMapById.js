function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import pickNearestBreakpoint from './pickNearestBreakpoint';
export default (function (mapById, hiddenById) {
  var clone = JSON.parse(JSON.stringify(mapById));
  Object.keys(clone).forEach(function (id) {
    var hiddenBreakpoints = hiddenById[id] || [];
    hiddenBreakpoints.forEach(function (bp) {
      var config = pickNearestBreakpoint(clone[id], bp);
      clone[id][bp] = _extends(_extends({}, config), {}, {
        hidden: true
      });
    });
  });
  return clone;
});