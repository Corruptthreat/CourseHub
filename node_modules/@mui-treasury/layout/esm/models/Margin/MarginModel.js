function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { isNil, toValidCssValue } from "../../utils";
export var getCssMargin = function getCssMargin(m) {
  if (typeof m === "string") {
    return "calc(".concat(m, ")");
  }

  return m;
};

var transformMargin = function transformMargin(m) {
  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (val) {
    return val;
  };
  return _extends(_extends({}, !isNil(m.marginLeft) && {
    marginLeft: fn(m.marginLeft)
  }), !isNil(m.marginRight) && {
    marginRight: fn(m.marginRight)
  });
};

var getCssValue = function getCssValue(v1, v2) {
  if (isNil(v1)) return v2;
  if (isNil(v2)) return v1;
  return "".concat(toValidCssValue(v1), " + ").concat(toValidCssValue(v2));
};

export var combineMargin = function combineMargin(m1, m2) {
  if (!m1 && !m2) return undefined;
  if (!m1 && m2) return m2;
  if (m1 && !m2) return m1;
  var marginLeft = getCssValue(m1.marginLeft, m2.marginLeft);
  var marginRight = getCssValue(m1.marginRight, m2.marginRight);
  return transformMargin({
    marginLeft: marginLeft,
    marginRight: marginRight
  });
};

var createMarginInterface = function createMarginInterface(value) {
  return {
    value: value,
    combine: function combine(m) {
      return createMarginInterface(combineMargin(value, m.value));
    },
    getStyle: function getStyle() {
      return transformMargin(value, getCssMargin);
    }
  };
};

export default createMarginInterface;