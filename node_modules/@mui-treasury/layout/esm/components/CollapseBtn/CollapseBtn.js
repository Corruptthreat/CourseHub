function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import ArrowLeft from '@material-ui/icons/KeyboardArrowLeftRounded';
import ArrowRight from '@material-ui/icons/KeyboardArrowRightRounded';
import { generateStyledProxyCreator } from '../Shared/StyledProxy';
import { useSidebarCollapse } from '../../hooks';
export default (function (styled) {
  var styledProxy = generateStyledProxyCreator(styled);
  var StyledButton = styledProxy(Button);
  var useStyles = makeStyles(function (_ref) {
    var palette = _ref.palette,
        breakpoints = _ref.breakpoints;
    return {
      root: _defineProperty({
        backgroundColor: palette.grey[50],
        textAlign: 'center',
        borderRadius: 0,
        borderTop: '1px solid',
        borderColor: palette.action.hover
      }, breakpoints.up('sm'), {
        minHeight: 40
      })
    };
  });

  var CollapseBtn = function CollapseBtn(_ref2) {
    var children = _ref2.children,
        sidebarId = _ref2.sidebarId,
        _onClick = _ref2.onClick,
        SvgIconProps = _ref2.SvgIconProps,
        props = _objectWithoutProperties(_ref2, ["children", "sidebarId", "onClick", "SvgIconProps"]);

    var classes = useStyles(props);

    var _useSidebarCollapse = useSidebarCollapse(sidebarId, 'CollapseBtn'),
        id = _useSidebarCollapse.id,
        anchor = _useSidebarCollapse.anchor,
        hiddenStyles = _useSidebarCollapse.hiddenStyles,
        state = _useSidebarCollapse.state,
        setCollapsed = _useSidebarCollapse.setCollapsed;

    var arrowR = /*#__PURE__*/React.createElement(ArrowRight, SvgIconProps);
    var arrowL = /*#__PURE__*/React.createElement(ArrowLeft, SvgIconProps);

    var getArrow = function getArrow() {
      if (anchor === 'left') {
        return state.collapsed ? arrowR : arrowL;
      }

      if (anchor === 'right') {
        return state.collapsed ? arrowL : arrowR;
      }

      return null;
    };

    return /*#__PURE__*/React.createElement(StyledButton, _extends({}, props, {
      classes: classes,
      styles: hiddenStyles,
      onClick: function onClick(e) {
        if (typeof _onClick === 'function') _onClick(e);
        setCollapsed(id, !state.collapsed);
      }
    }), typeof children === 'function' ? children(_extends({
      anchor: anchor
    }, state)) : getArrow());
  };

  return CollapseBtn;
});