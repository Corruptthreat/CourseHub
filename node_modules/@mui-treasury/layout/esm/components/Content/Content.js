function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { useTheme } from '@material-ui/core/styles';
import getHeaderOffset from '../HeaderOffset';
import { useLayoutCtx } from '../../contexts';
import { createBreakpointStyles } from '../../utils';
import ContentCompiler from '../../compilers/ContentCompiler';
import { useFullscreenCtx } from '../../contexts/FullscreenContext';
import { generateStyledProxyCreator } from '../Shared/StyledProxy';
export default (function (styled) {
  var styledProxy = generateStyledProxyCreator(styled);
  var Main = styledProxy('main');
  var HeaderOffset = getHeaderOffset(styled);

  var Content = function Content(_ref) {
    var children = _ref.children,
        props = _objectWithoutProperties(_ref, ["children"]);

    var _useTheme = useTheme(),
        breakpoints = _useTheme.breakpoints;

    var _useLayoutCtx = useLayoutCtx(),
        data = _useLayoutCtx.data,
        state = _useLayoutCtx.state;

    var styles = createBreakpointStyles(ContentCompiler(state, data.edgeSidebar).getResultStyle(data.content.id), breakpoints);
    var isFullscreen = useFullscreenCtx();
    return /*#__PURE__*/React.createElement(Main, _extends({}, props, {
      styles: _extends(_extends({
        transition: 'all 300ms cubic-bezier(0.0, 0, 0.2, 1) 0ms'
      }, styles), isFullscreen && {
        flexGrow: 1,
        minHeight: 0,
        display: 'flex'
      })
    }), /*#__PURE__*/React.createElement(HeaderOffset, null), children);
  };

  return Content;
});