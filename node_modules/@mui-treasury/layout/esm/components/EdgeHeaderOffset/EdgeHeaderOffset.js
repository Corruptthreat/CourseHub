function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from "react";
import cx from "clsx";
import { makeStyles, useTheme } from "@material-ui/core/styles";
import { useLayoutCtx } from "../../contexts";
import EdgeHeaderOffsetCompiler from "../../compilers/EdgeHeaderOffsetCompiler";
import { useEdgeHeaderMagnet } from "../../hooks";
import { generateStyledProxyCreator } from '../Shared/StyledProxy';
import { transitionStyles } from "../../styles";
import { createBreakpointStyles } from "../../utils";
export default (function (styled) {
  var styledProxy = generateStyledProxyCreator(styled);
  var Div = styledProxy('div');
  var useTransitionStyles = makeStyles(transitionStyles);

  var EdgeHeaderOffset = function EdgeHeaderOffset(_ref) {
    var sidebarId = _ref.sidebarId;

    var _useTheme = useTheme(),
        breakpoints = _useTheme.breakpoints;

    var transition = useTransitionStyles();

    var _useLayoutCtx = useLayoutCtx(),
        data = _useLayoutCtx.data;

    var compiler = EdgeHeaderOffsetCompiler(data.edgeSidebar, data.header);
    var styles = createBreakpointStyles(compiler.getResultStyle(sidebarId), breakpoints);
    var inlineStyle = useEdgeHeaderMagnet(sidebarId);
    return /*#__PURE__*/React.createElement(Div, {
      className: cx("EdgeHeaderOffset", transition.smooth),
      styles: _extends(_extends({}, styles), {}, {
        flexShrink: 0
      }),
      style: inlineStyle
    });
  };

  return EdgeHeaderOffset;
});