function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import IconButton from '@material-ui/core/IconButton';
import ArrowLeft from '@material-ui/icons/KeyboardArrowLeftRounded';
import ArrowRight from '@material-ui/icons/KeyboardArrowRightRounded';
import MenuRounded from '@material-ui/icons/MenuRounded';
import { useSidebarTrigger } from '../../hooks';
import { generateStyledProxyCreator } from '../Shared/StyledProxy';
export default (function (styled) {
  var styledProxy = generateStyledProxyCreator(styled);
  var StyledIconBtn = styledProxy(IconButton);
  var useStyles = makeStyles(function (_ref) {
    var spacing = _ref.spacing;
    return {
      // @ts-ignore
      root: function root(_ref2) {
        var anchor = _ref2.anchor;
        return _extends(_extends({}, anchor === 'left' && {
          marginLeft: spacing(-1),
          marginRight: spacing(1)
        }), anchor === 'right' && {
          marginLeft: spacing(1),
          marginRight: spacing(-1)
        });
      }
    };
  }, {
    name: 'SidebarTrigger'
  });

  var SidebarTrigger = function SidebarTrigger(_ref3) {
    var children = _ref3.children,
        sidebarId = _ref3.sidebarId,
        _onClick = _ref3.onClick,
        SvgIconProps = _ref3.SvgIconProps,
        props = _objectWithoutProperties(_ref3, ["children", "sidebarId", "onClick", "SvgIconProps"]);

    var _useSidebarTrigger = useSidebarTrigger(sidebarId, 'SidebarTrigger'),
        id = _useSidebarTrigger.id,
        anchor = _useSidebarTrigger.anchor,
        hiddenStyles = _useSidebarTrigger.hiddenStyles,
        state = _useSidebarTrigger.state,
        setOpen = _useSidebarTrigger.setOpen;

    var classes = useStyles(_extends(_extends({}, props), {}, {
      anchor: anchor
    }));

    var getArrow = function getArrow() {
      if (!state) return null;
      if (!state.open) return /*#__PURE__*/React.createElement(MenuRounded, SvgIconProps);
      if (anchor === 'left') return /*#__PURE__*/React.createElement(ArrowLeft, SvgIconProps);
      if (anchor === 'right') return /*#__PURE__*/React.createElement(ArrowRight, SvgIconProps);
      return null;
    };

    return /*#__PURE__*/React.createElement(StyledIconBtn, _extends({}, props, {
      styles: hiddenStyles,
      classes: classes,
      onClick: function onClick(e) {
        if (typeof _onClick === 'function') _onClick(e);
        setOpen(id, !state.open);
      }
    }), typeof children === 'function' ? children(_extends({
      anchor: anchor
    }, state)) : getArrow());
  };

  return SidebarTrigger;
});