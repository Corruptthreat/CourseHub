function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import Drawer from '@material-ui/core/Drawer';
import SwipeableDrawer from '@material-ui/core/SwipeableDrawer';
import { upperFirst } from '../../utils';
import createHiddenProxyComponent from './StyledProxy';
export var CLS = 'MuiTreasury-paper';
export var StyledProxyDrawer = createHiddenProxyComponent(Drawer, CLS);
export var StyledProxySwipeableDrawer = createHiddenProxyComponent(SwipeableDrawer, CLS);
export var createDrawerVariant = function createDrawerVariant(variant) {
  var StyledComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : StyledProxyDrawer;

  var Sidebar = function Sidebar(_ref) {
    var _ref$PaperProps = _ref.PaperProps,
        PaperProps = _ref$PaperProps === void 0 ? {} : _ref$PaperProps,
        props = _objectWithoutProperties(_ref, ["PaperProps"]);

    return /*#__PURE__*/React.createElement(StyledComponent, _extends({}, props, {
      PaperProps: _extends(_extends({}, PaperProps), {}, {
        className: "".concat(CLS, " ").concat(PaperProps.className)
      }),
      variant: variant
    }));
  };

  Sidebar.displayName = "".concat(upperFirst(variant), "DrawerSidebar");
  return Sidebar;
};
export var createSwipeableVariant = function createSwipeableVariant(variant) {
  var StyledComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : StyledProxySwipeableDrawer;

  var Sidebar = function Sidebar(_ref2) {
    var _ref2$PaperProps = _ref2.PaperProps,
        PaperProps = _ref2$PaperProps === void 0 ? {} : _ref2$PaperProps,
        props = _objectWithoutProperties(_ref2, ["PaperProps"]);

    return /*#__PURE__*/React.createElement(StyledComponent, _extends({}, props, {
      PaperProps: _extends(_extends({}, PaperProps), {}, {
        className: "".concat(CLS, " ").concat(PaperProps.className)
      }),
      variant: variant
    }));
  };

  Sidebar.displayName = "".concat(upperFirst(variant), "SwipeableSidebar");
  return Sidebar;
};