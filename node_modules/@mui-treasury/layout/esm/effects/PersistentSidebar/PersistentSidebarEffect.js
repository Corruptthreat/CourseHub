function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import { get, upperFirst, getFlexBehaviorValue } from '../../utils';
import createEdgeModel from '../../models/Sidebar/Edge';
import createWidthInterface from '../../models/Width';
import createMarginInterface from '../../models/Margin';
export default (function (config, state) {
  var anchor = config.anchor;

  var _createEdgeModel = createEdgeModel(config, state),
      currentWidth = _createEdgeModel.width;

  var marginAttr = "margin".concat(upperFirst(anchor));

  var isBehavior = function isBehavior(value, objectId) {
    if (_typeof(config.persistentBehavior) === 'object') {
      var objectBehavior = get(config, ['persistentBehavior', objectId]);

      if (!objectBehavior) {
        return get(config, 'persistentBehavior._other') === value;
      }

      return objectBehavior === value;
    }

    return config.persistentBehavior === value;
  };

  var isSidebarOpen = get(state, ['sidebar', config.id, 'open']);
  return {
    id: config.id,
    getObjectWidth: function getObjectWidth(objectId) {
      return createWidthInterface(isSidebarOpen && isBehavior('fit', objectId) ? currentWidth : 0);
    },
    getObjectMargin: function getObjectMargin(objectId) {
      var getResult = function getResult() {
        if (!isSidebarOpen) {
          return _defineProperty({}, marginAttr, 0);
        } // open is true


        if (isBehavior('fit', objectId)) {
          return _defineProperty({}, marginAttr, currentWidth);
        }

        if (isBehavior('flexible', objectId)) {
          // for flexible, only marginLeft works. You can try using marginRight.
          // May be it is because normally browser is LTR
          return {
            marginLeft: getFlexBehaviorValue(config.anchor, currentWidth)
          };
        }

        return _defineProperty({}, marginAttr, 0);
      };

      return createMarginInterface(getResult());
    }
  };
});