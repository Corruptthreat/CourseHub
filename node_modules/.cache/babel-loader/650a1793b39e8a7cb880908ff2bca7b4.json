{"ast":null,"code":"var _jsxFileName = \"/home/sudo-byte/CourseHub-master/src/components/Users/AddUsers.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useSnackbar } from \"notistack\";\nimport { Formik, Form, Field, useField } from \"formik\";\nimport { TextField, Select } from \"formik-material-ui\";\nimport cx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { useSoftRiseShadowStyles } from \"@mui-treasury/styles/shadow/softRise\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport { Box, Button, FormControl, Typography, Input, FormHelperText } from \"@material-ui/core\";\nimport * as Yup from \"yup\";\nimport * as actions from \"../../store/actions\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 304,\n    margin: \"auto\"\n  },\n  content: {\n    padding: 24\n  },\n  button: {\n    marginTop: \"2rem\",\n    display: \"block\",\n    width: \"100%\",\n    height: \"3rem\",\n    border: \"none\",\n    background: \"linear-gradient(120deg, #2980b9, #8e44ad, #2980b9)\",\n    backgroundSize: \"200%\",\n    color: \"#fff\",\n    outline: \"none\",\n    transition: \"0.5s\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      backgroundPosition: \"right\"\n    }\n  }\n}));\n\nconst FormikField = ({\n  label,\n  name,\n  type = \"text\",\n  disabled\n}) => {\n  return /*#__PURE__*/React.createElement(Box, {\n    my: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    fullWidth: true,\n    component: TextField,\n    label: label,\n    name: name,\n    type: type,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst FormikPassword = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  const [showPassword, setShowPassword] = useState(false);\n  return /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    error: meta.touched && meta.error ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, label), /*#__PURE__*/React.createElement(Input, Object.assign({}, field, props, {\n    type: showPassword ? \"text\" : \"password\",\n    endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      style: {\n        padding: 0\n      },\n      onClick: () => setShowPassword(!showPassword),\n      onMouseDown: event => event.preventDefault(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, showPassword ? /*#__PURE__*/React.createElement(Visibility, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 31\n      }\n    }) : /*#__PURE__*/React.createElement(VisibilityOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 48\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  })), meta.touched && meta.error ? /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, meta.error) : null);\n};\n\nconst FormikSelect = ({\n  label,\n  name,\n  items,\n  disabled\n}) => {\n  return /*#__PURE__*/React.createElement(Box, {\n    my: 1,\n    textAlign: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    disabled: disabled,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, label), /*#__PURE__*/React.createElement(Field, {\n    component: Select,\n    name: name,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, items.map(item => /*#__PURE__*/React.createElement(MenuItem, {\n    key: item.value,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, item.label)))));\n};\n\nconst userTypeItems = [{\n  label: \"Học Viên\",\n  value: \"HV\"\n}, {\n  label: \"Giảng Viên\",\n  value: \"GV\"\n}];\nconst userItems = [{\n  label: \"Group 01\",\n  value: \"GP01\"\n}, {\n  label: \"Group 02\",\n  value: \"GP02\"\n}, {\n  label: \"Group 03\",\n  value: \"GP03\"\n}, {\n  label: \"Group 04\",\n  value: \"GP04\"\n}, {\n  label: \"Group 05\",\n  value: \"GP05\"\n}, {\n  label: \"Group 06\",\n  value: \"GP06\"\n}, {\n  label: \"Group 07\",\n  value: \"GP07\"\n}, {\n  label: \"Group 08\",\n  value: \"GP08\"\n}, {\n  label: \"Group 09\",\n  value: \"GP09\"\n}, {\n  label: \"Group 10\",\n  value: \"GP10\"\n}, {\n  label: \"Group 11\",\n  value: \"GP11\"\n}, {\n  label: \"Group 12\",\n  value: \"GP12\"\n}, {\n  label: \"Group 13\",\n  value: \"GP13\"\n}, {\n  label: \"Group 14\",\n  value: \"GP14\"\n}, {\n  label: \"Group 15\",\n  value: \"GP15\"\n}];\nexport const AddUsers = props => {\n  const classes = useStyles();\n  const {\n    preview,\n    group,\n    isEdit,\n    tabIndex,\n    selectedUser,\n    success,\n    error\n  } = props;\n  const {\n    onAddUser\n  } = props;\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const cardStyles = useStyles();\n  const shadowStyles = useSoftRiseShadowStyles();\n  useEffect(() => {\n    if (error) {\n      enqueueSnackbar(error, {\n        variant: \"error\",\n        anchorOrigin: {\n          vertical: \"bottom\",\n          horizontal: \"right\"\n        }\n      });\n    } else if (success) {\n      enqueueSnackbar(success, {\n        variant: \"success\",\n        anchorOrigin: {\n          vertical: \"bottom\",\n          horizontal: \"right\"\n        }\n      });\n    }\n  }, [error, success, enqueueSnackbar]);\n  let initialValues = {\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    accountType: \"\",\n    name: \"\",\n    phone: \"\",\n    group: \"\"\n  };\n\n  if (isEdit && selectedUser || preview && selectedUser) {\n    initialValues = {\n      username: selectedUser.taiKhoan,\n      password: \"\",\n      email: selectedUser.email,\n      accountType: selectedUser.maLoaiNguoiDung,\n      name: selectedUser.hoTen,\n      phone: selectedUser.soDt,\n      group: group\n    };\n  }\n\n  let validationSchema = Yup.object().shape({\n    username: Yup.string().min(3, \"Username must be at least 3 characters\").max(15, \"Username must be 15 characters or less\").required(\"Must enter a username\"),\n    password: Yup.string().min(3, \"Password must be at least 3 characters\").required(\"Password is required\"),\n    name: Yup.string().min(3, \"Name must be at least 3 characters\").max(15, \"Name must be 15 characters or less\").required(\"Must enter a name\"),\n    accountType: Yup.string().required(\"Account type is required\"),\n    group: Yup.string().required(\"Group is required\"),\n    phone: Yup.number().min(10, \"Phone number must be at least 10 characters\").required(\"Must enter a phone number\"),\n    email: Yup.string().email(\"Must be a valid email address\").required(\"Must enter an email\")\n  });\n\n  const onSubmit = (values, {\n    setSubmitting,\n    resetForm\n  }) => {\n    onAddUser(values, isEdit, tabIndex, group);\n    resetForm();\n    setSubmitting(false);\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: cx(cardStyles.root, shadowStyles.root),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }\n  }, preview ? null : /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }, isEdit ? \"Edit User\" : \"Add User\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }, ({\n    submitForm,\n    dirty,\n    isValid,\n    ...props\n  }) => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormikField, {\n    label: \"Username\",\n    name: \"username\",\n    disabled: isEdit || preview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormikField, {\n    label: \"Email\",\n    name: \"email\",\n    type: \"email\",\n    disabled: preview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 15\n    }\n  }), preview ? null : /*#__PURE__*/React.createElement(FormikPassword, {\n    label: \"Password\",\n    name: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormikSelect, {\n    label: \"Account type\",\n    name: \"accountType\",\n    items: userTypeItems,\n    disabled: preview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormikField, {\n    label: \"Name\",\n    name: \"name\",\n    disabled: preview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormikField, {\n    label: \"Phone\",\n    name: \"phone\",\n    disabled: preview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 15\n    }\n  }), preview ? null : /*#__PURE__*/React.createElement(FormikSelect, {\n    label: \"Choose a group\",\n    name: \"group\",\n    items: userItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 17\n    }\n  }), preview ? null : /*#__PURE__*/React.createElement(Box, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: !dirty || !isValid,\n    onClick: submitForm,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 19\n    }\n  }, \"Submit\"))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    group: state.auth.group,\n    error: state.usersManager.error,\n    success: state.usersManager.success,\n    isEdit: state.usersManager.isEdit,\n    tabIndex: state.usersManager.tabIndex,\n    selectedUser: state.usersManager.selectedUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddUser: (values, isEdit, tabIndex, group) => dispatch(actions.addUser(values, isEdit, tabIndex, group))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUsers);","map":{"version":3,"sources":["/home/sudo-byte/CourseHub-master/src/components/Users/AddUsers.js"],"names":["React","useEffect","useState","connect","useSnackbar","Formik","Form","Field","useField","TextField","Select","cx","makeStyles","Card","CardContent","useSoftRiseShadowStyles","InputLabel","MenuItem","IconButton","InputAdornment","Visibility","VisibilityOff","Box","Button","FormControl","Typography","Input","FormHelperText","Yup","actions","useStyles","theme","root","maxWidth","margin","content","padding","button","marginTop","display","width","height","border","background","backgroundSize","color","outline","transition","cursor","backgroundPosition","FormikField","label","name","type","disabled","FormikPassword","props","field","meta","showPassword","setShowPassword","touched","error","event","preventDefault","FormikSelect","items","map","item","value","userTypeItems","userItems","AddUsers","classes","preview","group","isEdit","tabIndex","selectedUser","success","onAddUser","enqueueSnackbar","cardStyles","shadowStyles","variant","anchorOrigin","vertical","horizontal","initialValues","username","password","email","accountType","phone","taiKhoan","maLoaiNguoiDung","hoTen","soDt","validationSchema","object","shape","string","min","max","required","number","onSubmit","values","setSubmitting","resetForm","submitForm","dirty","isValid","mapStateToProps","state","auth","usersManager","mapDispatchToProps","dispatch","addUser"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Formik, Form, Field, useField } from \"formik\";\r\nimport { TextField, Select } from \"formik-material-ui\";\r\n\r\nimport cx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\n\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\nimport { useSoftRiseShadowStyles } from \"@mui-treasury/styles/shadow/softRise\";\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  Typography,\r\n  Input,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\n\r\nimport * as Yup from \"yup\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 304,\r\n    margin: \"auto\",\r\n  },\r\n  content: {\r\n    padding: 24,\r\n  },\r\n  button: {\r\n    marginTop: \"2rem\",\r\n    display: \"block\",\r\n    width: \"100%\",\r\n    height: \"3rem\",\r\n    border: \"none\",\r\n    background: \"linear-gradient(120deg, #2980b9, #8e44ad, #2980b9)\",\r\n    backgroundSize: \"200%\",\r\n    color: \"#fff\",\r\n    outline: \"none\",\r\n    transition: \"0.5s\",\r\n    cursor: \"pointer\",\r\n\r\n    \"&:hover\": {\r\n      backgroundPosition: \"right\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst FormikField = ({ label, name, type = \"text\", disabled }) => {\r\n  return (\r\n    <Box my={1}>\r\n      <Field\r\n        fullWidth\r\n        component={TextField}\r\n        label={label}\r\n        name={name}\r\n        type={type}\r\n        disabled={disabled}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst FormikPassword = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  return (\r\n    <FormControl fullWidth error={meta.touched && meta.error ? true : false}>\r\n      <InputLabel>{label}</InputLabel>\r\n      <Input\r\n        {...field}\r\n        {...props}\r\n        type={showPassword ? \"text\" : \"password\"}\r\n        endAdornment={\r\n          <InputAdornment position=\"end\">\r\n            <IconButton\r\n              style={{ padding: 0 }}\r\n              onClick={() => setShowPassword(!showPassword)}\r\n              onMouseDown={(event) => event.preventDefault()}\r\n            >\r\n              {showPassword ? <Visibility /> : <VisibilityOff />}\r\n            </IconButton>\r\n          </InputAdornment>\r\n        }\r\n      />\r\n      {meta.touched && meta.error ? (\r\n        <FormHelperText>{meta.error}</FormHelperText>\r\n      ) : null}\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst FormikSelect = ({ label, name, items, disabled }) => {\r\n  return (\r\n    <Box my={1} textAlign=\"left\">\r\n      <FormControl disabled={disabled} fullWidth>\r\n        <InputLabel>{label}</InputLabel>\r\n        <Field component={Select} name={name} disabled={disabled}>\r\n          {items.map((item) => (\r\n            <MenuItem key={item.value} value={item.value}>\r\n              {item.label}\r\n            </MenuItem>\r\n          ))}\r\n        </Field>\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst userTypeItems = [\r\n  { label: \"Học Viên\", value: \"HV\" },\r\n  { label: \"Giảng Viên\", value: \"GV\" },\r\n];\r\n\r\nconst userItems = [\r\n  { label: \"Group 01\", value: \"GP01\" },\r\n  { label: \"Group 02\", value: \"GP02\" },\r\n  { label: \"Group 03\", value: \"GP03\" },\r\n  { label: \"Group 04\", value: \"GP04\" },\r\n  { label: \"Group 05\", value: \"GP05\" },\r\n  { label: \"Group 06\", value: \"GP06\" },\r\n  { label: \"Group 07\", value: \"GP07\" },\r\n  { label: \"Group 08\", value: \"GP08\" },\r\n  { label: \"Group 09\", value: \"GP09\" },\r\n  { label: \"Group 10\", value: \"GP10\" },\r\n  { label: \"Group 11\", value: \"GP11\" },\r\n  { label: \"Group 12\", value: \"GP12\" },\r\n  { label: \"Group 13\", value: \"GP13\" },\r\n  { label: \"Group 14\", value: \"GP14\" },\r\n  { label: \"Group 15\", value: \"GP15\" },\r\n];\r\n\r\nexport const AddUsers = (props) => {\r\n  const classes = useStyles();\r\n  const {\r\n    preview,\r\n    group,\r\n    isEdit,\r\n    tabIndex,\r\n    selectedUser,\r\n    success,\r\n    error,\r\n  } = props;\r\n  const { onAddUser } = props;\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const cardStyles = useStyles();\r\n  const shadowStyles = useSoftRiseShadowStyles();\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      enqueueSnackbar(error, {\r\n        variant: \"error\",\r\n        anchorOrigin: {\r\n          vertical: \"bottom\",\r\n          horizontal: \"right\",\r\n        },\r\n      });\r\n    } else if (success) {\r\n      enqueueSnackbar(success, {\r\n        variant: \"success\",\r\n        anchorOrigin: {\r\n          vertical: \"bottom\",\r\n          horizontal: \"right\",\r\n        },\r\n      });\r\n    }\r\n  }, [error, success, enqueueSnackbar]);\r\n\r\n  let initialValues = {\r\n    username: \"\",\r\n    password: \"\",\r\n    email: \"\",\r\n    accountType: \"\",\r\n    name: \"\",\r\n    phone: \"\",\r\n    group: \"\",\r\n  };\r\n\r\n  if ((isEdit && selectedUser) || (preview && selectedUser)) {\r\n    initialValues = {\r\n      username: selectedUser.taiKhoan,\r\n      password: \"\",\r\n      email: selectedUser.email,\r\n      accountType: selectedUser.maLoaiNguoiDung,\r\n      name: selectedUser.hoTen,\r\n      phone: selectedUser.soDt,\r\n      group: group,\r\n    };\r\n  }\r\n\r\n  let validationSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n      .min(3, \"Username must be at least 3 characters\")\r\n      .max(15, \"Username must be 15 characters or less\")\r\n      .required(\"Must enter a username\"),\r\n    password: Yup.string()\r\n      .min(3, \"Password must be at least 3 characters\")\r\n      .required(\"Password is required\"),\r\n    name: Yup.string()\r\n      .min(3, \"Name must be at least 3 characters\")\r\n      .max(15, \"Name must be 15 characters or less\")\r\n      .required(\"Must enter a name\"),\r\n    accountType: Yup.string().required(\"Account type is required\"),\r\n    group: Yup.string().required(\"Group is required\"),\r\n    phone: Yup.number()\r\n      .min(10, \"Phone number must be at least 10 characters\")\r\n      .required(\"Must enter a phone number\"),\r\n    email: Yup.string()\r\n      .email(\"Must be a valid email address\")\r\n      .required(\"Must enter an email\"),\r\n  });\r\n\r\n  const onSubmit = (values, { setSubmitting, resetForm }) => {\r\n    onAddUser(values, isEdit, tabIndex, group);\r\n    resetForm();\r\n    setSubmitting(false);\r\n  };\r\n\r\n  return (\r\n    <Card className={cx(cardStyles.root, shadowStyles.root)}>\r\n      <CardContent className={classes.content}>\r\n        {preview ? null : (\r\n          <Typography variant=\"h4\" align=\"center\">\r\n            {isEdit ? \"Edit User\" : \"Add User\"}\r\n          </Typography>\r\n        )}\r\n\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ submitForm, dirty, isValid, ...props }) => (\r\n            <Form>\r\n              <FormikField\r\n                label=\"Username\"\r\n                name=\"username\"\r\n                disabled={isEdit || preview}\r\n              />\r\n\r\n              <FormikField\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                disabled={preview}\r\n              />\r\n\r\n              {preview ? null : (\r\n                <FormikPassword label=\"Password\" name=\"password\" />\r\n              )}\r\n\r\n              <FormikSelect\r\n                label=\"Account type\"\r\n                name=\"accountType\"\r\n                items={userTypeItems}\r\n                disabled={preview}\r\n              />\r\n              <FormikField label=\"Name\" name=\"name\" disabled={preview} />\r\n              <FormikField label=\"Phone\" name=\"phone\" disabled={preview} />\r\n\r\n              {preview ? null : (\r\n                <FormikSelect\r\n                  label=\"Choose a group\"\r\n                  name=\"group\"\r\n                  items={userItems}\r\n                />\r\n              )}\r\n\r\n              {preview ? null : (\r\n                <Box align=\"center\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={!dirty || !isValid}\r\n                    onClick={submitForm}\r\n                    className={classes.button}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    group: state.auth.group,\r\n    error: state.usersManager.error,\r\n    success: state.usersManager.success,\r\n    isEdit: state.usersManager.isEdit,\r\n    tabIndex: state.usersManager.tabIndex,\r\n    selectedUser: state.usersManager.selectedUser,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAddUser: (values, isEdit, tabIndex, group) =>\r\n      dispatch(actions.addUser(values, isEdit, tabIndex, group)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUsers);\r\n"]},"metadata":{},"sourceType":"module"}