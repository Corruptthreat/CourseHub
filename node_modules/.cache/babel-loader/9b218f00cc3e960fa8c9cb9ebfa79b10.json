{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\nconst initialState = {\n  token: null,\n  success: null,\n  error: null,\n  loading: false,\n  group: \"GP08\",\n  accountName: null,\n  authRedirectPath: \"/\"\n};\n\nconst authStart = (state, action) => {\n  return updateObject(state, {\n    error: null,\n    success: null,\n    loading: true\n  });\n};\n\nconst authSuccess = (state, action) => {\n  return updateObject(state, {\n    token: action.authData.accessToken,\n    accountName: action.authData.taiKhoan,\n    error: null,\n    success: action.message,\n    loading: false\n  });\n};\n\nconst authFail = (state, action) => {\n  return updateObject(state, {\n    error: action.error,\n    success: null,\n    loading: false\n  });\n};\n\nconst authLogout = (state, action) => {\n  return updateObject(state, {\n    token: null\n  });\n}; // const setAuthRedirectPath = (state, action) => {\n//   return updateObject(state, { authRedirectPath: action.path });\n// };\n\n\nconst chooseGroup = (state, action) => {\n  return updateObject(state, {\n    group: action.group\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.AUTH_START:\n      return authStart(state, action);\n\n    case actionTypes.AUTH_SUCCESS:\n      return authSuccess(state, action);\n\n    case actionTypes.AUTH_FAIL:\n      return authFail(state, action);\n\n    case actionTypes.AUTH_LOGOUT:\n      return authLogout(state, action);\n\n    case actionTypes.CHOOSE_GROUP:\n      return chooseGroup(state, action);\n    // case actionTypes.SET_AUTH_REDIRECT_PATH:\n    //   return setAuthRedirectPath(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/sudo-byte/CourseHub-master/src/store/reducers/auth.js"],"names":["actionTypes","updateObject","initialState","token","success","error","loading","group","accountName","authRedirectPath","authStart","state","action","authSuccess","authData","accessToken","taiKhoan","message","authFail","authLogout","chooseGroup","reducer","type","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","CHOOSE_GROUP"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,KAAK,EAAE,IAHY;AAInBC,EAAAA,OAAO,EAAE,KAJU;AAKnBC,EAAAA,KAAK,EAAE,MALY;AAMnBC,EAAAA,WAAW,EAAE,IANM;AAOnBC,EAAAA,gBAAgB,EAAE;AAPC,CAArB;;AAUA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,SAAOX,YAAY,CAACU,KAAD,EAAQ;AAAEN,IAAAA,KAAK,EAAE,IAAT;AAAeD,IAAAA,OAAO,EAAE,IAAxB;AAA8BE,IAAAA,OAAO,EAAE;AAAvC,GAAR,CAAnB;AACD,CAFD;;AAIA,MAAMO,WAAW,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACrC,SAAOX,YAAY,CAACU,KAAD,EAAQ;AACzBR,IAAAA,KAAK,EAAES,MAAM,CAACE,QAAP,CAAgBC,WADE;AAEzBP,IAAAA,WAAW,EAAEI,MAAM,CAACE,QAAP,CAAgBE,QAFJ;AAGzBX,IAAAA,KAAK,EAAE,IAHkB;AAIzBD,IAAAA,OAAO,EAAEQ,MAAM,CAACK,OAJS;AAKzBX,IAAAA,OAAO,EAAE;AALgB,GAAR,CAAnB;AAOD,CARD;;AAUA,MAAMY,QAAQ,GAAG,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAClC,SAAOX,YAAY,CAACU,KAAD,EAAQ;AACzBN,IAAAA,KAAK,EAAEO,MAAM,CAACP,KADW;AAEzBD,IAAAA,OAAO,EAAE,IAFgB;AAGzBE,IAAAA,OAAO,EAAE;AAHgB,GAAR,CAAnB;AAKD,CAND;;AAQA,MAAMa,UAAU,GAAG,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACpC,SAAOX,YAAY,CAACU,KAAD,EAAQ;AAAER,IAAAA,KAAK,EAAE;AAAT,GAAR,CAAnB;AACD,CAFD,C,CAIA;AACA;AACA;;;AAEA,MAAMiB,WAAW,GAAG,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACrC,SAAOX,YAAY,CAACU,KAAD,EAAQ;AACzBJ,IAAAA,KAAK,EAAEK,MAAM,CAACL;AADW,GAAR,CAAnB;AAGD,CAJD;;AAMA,MAAMc,OAAO,GAAG,CAACV,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACU,IAAf;AACE,SAAKtB,WAAW,CAACuB,UAAjB;AACE,aAAOb,SAAS,CAACC,KAAD,EAAQC,MAAR,CAAhB;;AACF,SAAKZ,WAAW,CAACwB,YAAjB;AACE,aAAOX,WAAW,CAACF,KAAD,EAAQC,MAAR,CAAlB;;AACF,SAAKZ,WAAW,CAACyB,SAAjB;AACE,aAAOP,QAAQ,CAACP,KAAD,EAAQC,MAAR,CAAf;;AAEF,SAAKZ,WAAW,CAAC0B,WAAjB;AACE,aAAOP,UAAU,CAACR,KAAD,EAAQC,MAAR,CAAjB;;AAEF,SAAKZ,WAAW,CAAC2B,YAAjB;AACE,aAAOP,WAAW,CAACT,KAAD,EAAQC,MAAR,CAAlB;AAEF;AACA;;AACA;AACE,aAAOD,KAAP;AAjBJ;AAmBD,CApBD;;AAsBA,eAAeU,OAAf","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\r\nimport { updateObject } from \"../utility\";\r\n\r\nconst initialState = {\r\n  token: null,\r\n  success: null,\r\n  error: null,\r\n  loading: false,\r\n  group: \"GP08\",\r\n  accountName: null,\r\n  authRedirectPath: \"/\",\r\n};\r\n\r\nconst authStart = (state, action) => {\r\n  return updateObject(state, { error: null, success: null, loading: true });\r\n};\r\n\r\nconst authSuccess = (state, action) => {\r\n  return updateObject(state, {\r\n    token: action.authData.accessToken,\r\n    accountName: action.authData.taiKhoan,\r\n    error: null,\r\n    success: action.message,\r\n    loading: false,\r\n  });\r\n};\r\n\r\nconst authFail = (state, action) => {\r\n  return updateObject(state, {\r\n    error: action.error,\r\n    success: null,\r\n    loading: false,\r\n  });\r\n};\r\n\r\nconst authLogout = (state, action) => {\r\n  return updateObject(state, { token: null });\r\n};\r\n\r\n// const setAuthRedirectPath = (state, action) => {\r\n//   return updateObject(state, { authRedirectPath: action.path });\r\n// };\r\n\r\nconst chooseGroup = (state, action) => {\r\n  return updateObject(state, {\r\n    group: action.group,\r\n  });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.AUTH_START:\r\n      return authStart(state, action);\r\n    case actionTypes.AUTH_SUCCESS:\r\n      return authSuccess(state, action);\r\n    case actionTypes.AUTH_FAIL:\r\n      return authFail(state, action);\r\n\r\n    case actionTypes.AUTH_LOGOUT:\r\n      return authLogout(state, action);\r\n\r\n    case actionTypes.CHOOSE_GROUP:\r\n      return chooseGroup(state, action);\r\n\r\n    // case actionTypes.SET_AUTH_REDIRECT_PATH:\r\n    //   return setAuthRedirectPath(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}