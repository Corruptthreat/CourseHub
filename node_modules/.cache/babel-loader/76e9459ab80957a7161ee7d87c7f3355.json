{"ast":null,"code":"var _jsxFileName = \"/home/sudo-byte/CourseHub-master/src/components/SwitchButton/DarkThemeSwitch.js\";\nimport React from \"react\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { useN01SwitchStyles } from \"@mui-treasury/styles/switch/n01\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions\";\n\nconst DarkThemeSwitch = ({\n  darkTheme,\n  onDarkTheme\n}) => {\n  const switchStyles = useN01SwitchStyles();\n  const localTheme = JSON.parse(localStorage.getItem(\"darkTheme\"));\n  let isTheme = darkTheme;\n\n  if (!darkTheme) {\n    isTheme = localTheme;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Dark Theme\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    classes: switchStyles,\n    checked: isTheme,\n    onChange: e => onDarkTheme(e.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = state => {\n  return {\n    darkTheme: state.ui.darkTheme\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDarkTheme: open => dispatch(actions.darkTheme(open))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DarkThemeSwitch);","map":{"version":3,"sources":["/home/sudo-byte/CourseHub-master/src/components/SwitchButton/DarkThemeSwitch.js"],"names":["React","Switch","Tooltip","useN01SwitchStyles","connect","actions","DarkThemeSwitch","darkTheme","onDarkTheme","switchStyles","localTheme","JSON","parse","localStorage","getItem","isTheme","e","target","checked","mapStateToProps","state","ui","mapDispatchToProps","dispatch","open"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAgC;AACtD,QAAMC,YAAY,GAAGN,kBAAkB,EAAvC;AACA,QAAMO,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAnB;AAEA,MAAIC,OAAO,GAAGR,SAAd;;AACA,MAAI,CAACA,SAAL,EAAgB;AACdQ,IAAAA,OAAO,GAAGL,UAAV;AACD;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAED,YADX;AAEE,IAAA,OAAO,EAAEM,OAFX;AAGE,IAAA,QAAQ,EAAGC,CAAD,IAAOR,WAAW,CAACQ,CAAC,CAACC,MAAF,CAASC,OAAV,CAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAWD,CApBD;;AAsBA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLb,IAAAA,SAAS,EAAEa,KAAK,CAACC,EAAN,CAASd;AADf,GAAP;AAGD,CAJD;;AAMA,MAAMe,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLf,IAAAA,WAAW,EAAGgB,IAAD,IAAUD,QAAQ,CAAClB,OAAO,CAACE,SAAR,CAAkBiB,IAAlB,CAAD;AAD1B,GAAP;AAGD,CAJD;;AAMA,eAAepB,OAAO,CAACe,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ChB,eAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { useN01SwitchStyles } from \"@mui-treasury/styles/switch/n01\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nconst DarkThemeSwitch = ({ darkTheme, onDarkTheme }) => {\r\n  const switchStyles = useN01SwitchStyles();\r\n  const localTheme = JSON.parse(localStorage.getItem(\"darkTheme\"));\r\n\r\n  let isTheme = darkTheme;\r\n  if (!darkTheme) {\r\n    isTheme = localTheme;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Tooltip title=\"Dark Theme\">\r\n        <Switch\r\n          classes={switchStyles}\r\n          checked={isTheme}\r\n          onChange={(e) => onDarkTheme(e.target.checked)}\r\n        />\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    darkTheme: state.ui.darkTheme,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onDarkTheme: (open) => dispatch(actions.darkTheme(open)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DarkThemeSwitch);\r\n"]},"metadata":{},"sourceType":"module"}