{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport PropTypes from 'prop-types';\nimport { createElement, Fragment, PureComponent } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport clsx from 'clsx';\nimport Dropzone from 'react-dropzone';\nimport Chip from '@material-ui/core/Chip';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction isImage(file) {\n  if (file.type.split('/')[0] === 'image') {\n    return true;\n  }\n}\n\nfunction convertBytesToMbsOrKbs(filesize) {\n  var size = ''; // I know, not technically correct...\n\n  if (filesize >= 1000000) {\n    size = filesize / 1000000 + ' megabytes';\n  } else if (filesize >= 1000) {\n    size = filesize / 1000 + ' kilobytes';\n  } else {\n    size = filesize + ' bytes';\n  }\n\n  return size;\n}\n\nfunction createFileFromUrl(_x) {\n  return _createFileFromUrl.apply(this, arguments);\n}\n\nfunction _createFileFromUrl() {\n  _createFileFromUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var response, data, metadata, filename;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.blob();\n\n          case 5:\n            data = _context.sent;\n            metadata = {\n              type: data.type\n            };\n            filename = url.replace(/\\?.+/, '').split('/').pop();\n            return _context.abrupt(\"return\", new File([data], filename, metadata));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createFileFromUrl.apply(this, arguments);\n}\n\nfunction readFile(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      var _event$target;\n\n      resolve(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n    };\n\n    reader.onerror = function (event) {\n      reader.abort();\n      reject(event);\n    };\n\n    reader.readAsDataURL(file);\n  });\n}\n\nvar styles = function styles(_ref) {\n  var palette = _ref.palette,\n      shape = _ref.shape,\n      spacing = _ref.spacing;\n  return {\n    root: {},\n    imageContainer: {\n      position: 'relative',\n      zIndex: 10,\n      textAlign: 'center',\n      '&:hover $image': {\n        opacity: 0.3\n      },\n      '&:hover $removeButton': {\n        opacity: 1\n      }\n    },\n    image: {\n      height: 100,\n      width: 'initial',\n      maxWidth: '100%',\n      color: palette.text.primary,\n      transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n      boxSizing: 'border-box',\n      boxShadow: 'rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px',\n      borderRadius: shape.borderRadius,\n      zIndex: 5,\n      opacity: 1\n    },\n    removeButton: {\n      transition: '.5s ease',\n      position: 'absolute',\n      opacity: 0,\n      top: spacing(-1),\n      right: spacing(-1),\n      width: 40,\n      height: 40\n    }\n  };\n};\n\nvar _ref4 = /*#__PURE__*/createElement(DeleteIcon, null);\n\nfunction PreviewList(_ref2) {\n  var fileObjects = _ref2.fileObjects,\n      handleRemove = _ref2.handleRemove,\n      showFileNames = _ref2.showFileNames,\n      useChipsForPreview = _ref2.useChipsForPreview,\n      previewChipProps = _ref2.previewChipProps,\n      previewGridClasses = _ref2.previewGridClasses,\n      previewGridProps = _ref2.previewGridProps,\n      classes = _ref2.classes,\n      getPreviewIcon = _ref2.getPreviewIcon;\n\n  if (useChipsForPreview) {\n    return fileObjects.map(function (fileObject, i) {\n      return createElement(\"div\", {\n        key: i\n      }, createElement(Chip, _extends({\n        variant: \"outlined\"\n      }, previewChipProps, {\n        label: fileObject.file.name,\n        onDelete: handleRemove(i)\n      })));\n    });\n  }\n\n  return createElement(Grid, _extends({\n    spacing: 8\n  }, previewGridProps.container, {\n    container: true,\n    className: clsx(classes.root, previewGridClasses.container)\n  }), fileObjects.map(function (fileObject, i) {\n    var _ref3, _fileObject$file;\n\n    return createElement(Grid, _extends({\n      xs: 4\n    }, previewGridProps.item, {\n      item: true,\n      key: \"\".concat((_ref3 = (_fileObject$file = fileObject.file) === null || _fileObject$file === void 0 ? void 0 : _fileObject$file.name) !== null && _ref3 !== void 0 ? _ref3 : 'file', \"-\").concat(i),\n      className: clsx(classes.imageContainer, previewGridClasses.item)\n    }), getPreviewIcon(fileObject, classes), showFileNames && createElement(Typography, {\n      variant: \"body1\",\n      component: \"p\"\n    }, fileObject.file.name), createElement(Fab, {\n      onClick: handleRemove(i),\n      \"aria-label\": \"Delete\",\n      className: classes.removeButton\n    }, _ref4));\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? PreviewList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  fileObjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n  getPreviewIcon: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired,\n  previewChipProps: PropTypes.object,\n  previewGridClasses: PropTypes.object,\n  previewGridProps: PropTypes.object,\n  showFileNames: PropTypes.bool,\n  useChipsForPreview: PropTypes.bool\n} : void 0;\nvar PreviewList$1 = withStyles(styles, {\n  name: 'MuiDropzonePreviewList'\n})(PreviewList);\nvar variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nvar styles$1 = function styles(theme) {\n  return {\n    success: {\n      backgroundColor: theme.palette.success.main\n    },\n    error: {\n      backgroundColor: theme.palette.error.main\n    },\n    info: {\n      backgroundColor: theme.palette.info.main\n    },\n    warning: {\n      backgroundColor: theme.palette.warning.main\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    icon: {\n      fontSize: 20,\n      opacity: 0.9,\n      marginRight: theme.spacing(1)\n    },\n    closeButton: {}\n  };\n};\n\nfunction SnackbarContentWrapper(props) {\n  var classes = props.classes,\n      className = props.className,\n      message = props.message,\n      onClose = props.onClose,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"message\", \"onClose\", \"variant\"]);\n\n  var Icon = variantIcon[variant];\n  return createElement(SnackbarContent, _extends({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message\n    }, createElement(Icon, {\n      className: classes.icon\n    }), message),\n    action: [createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      className: classes.closeButton,\n      onClick: onClose\n    }, createElement(CloseIcon, {\n      className: classes.icon\n    }))]\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? SnackbarContentWrapper.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired\n} : void 0;\nvar SnackbarContentWrapper$1 = withStyles(styles$1, {\n  name: 'MuiDropzoneSnackbar'\n})(SnackbarContentWrapper);\n\nvar styles$2 = function styles(_ref) {\n  var palette = _ref.palette,\n      shape = _ref.shape,\n      spacing = _ref.spacing;\n  return {\n    '@keyframes progress': {\n      '0%': {\n        backgroundPosition: '0 0'\n      },\n      '100%': {\n        backgroundPosition: '-70px 0'\n      }\n    },\n    root: {\n      position: 'relative',\n      width: '100%',\n      minHeight: '250px',\n      backgroundColor: palette.background.paper,\n      border: 'dashed',\n      borderColor: palette.divider,\n      borderRadius: shape.borderRadius,\n      boxSizing: 'border-box',\n      cursor: 'pointer',\n      overflow: 'hidden'\n    },\n    active: {\n      animation: '$progress 2s linear infinite !important',\n      // eslint-disable-next-line max-len\n      backgroundImage: \"repeating-linear-gradient(-45deg, \".concat(palette.background.paper, \", \").concat(palette.background.paper, \" 25px, \").concat(palette.divider, \" 25px, \").concat(palette.divider, \" 50px)\"),\n      backgroundSize: '150% 100%',\n      border: 'solid',\n      borderColor: palette.primary.light\n    },\n    invalid: {\n      // eslint-disable-next-line max-len\n      backgroundImage: \"repeating-linear-gradient(-45deg, \".concat(palette.error.light, \", \").concat(palette.error.light, \" 25px, \").concat(palette.error.dark, \" 25px, \").concat(palette.error.dark, \" 50px)\"),\n      borderColor: palette.error.main\n    },\n    textContainer: {\n      textAlign: 'center'\n    },\n    text: {\n      marginBottom: spacing(3),\n      marginTop: spacing(3)\n    },\n    icon: {\n      width: 51,\n      height: 51,\n      color: palette.text.primary\n    }\n  };\n};\n\nvar defaultSnackbarAnchorOrigin = {\n  horizontal: 'left',\n  vertical: 'bottom'\n};\n\nvar defaultGetPreviewIcon = function defaultGetPreviewIcon(fileObject, classes) {\n  if (isImage(fileObject.file)) {\n    return createElement(\"img\", {\n      className: classes.image,\n      role: \"presentation\",\n      src: fileObject.data\n    });\n  }\n\n  return createElement(AttachFileIcon, {\n    className: classes.image\n  });\n};\n/**\n * This components creates a Material-UI Dropzone, with previews and snackbar notifications.\n */\n\n\nvar DropzoneAreaBase = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneAreaBase, _React$PureComponent);\n\n  function DropzoneAreaBase() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneAreaBase);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneAreaBase)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      openSnackBar: false,\n      snackbarMessage: '',\n      snackbarVariant: 'success'\n    };\n\n    _this.handleDropAccepted = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(acceptedFiles, evt) {\n        var _this$props, fileObjects, filesLimit, getFileAddedMessage, getFileLimitExceedMessage, onAdd, onDrop, fileObjs, message;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props = _this.props, fileObjects = _this$props.fileObjects, filesLimit = _this$props.filesLimit, getFileAddedMessage = _this$props.getFileAddedMessage, getFileLimitExceedMessage = _this$props.getFileLimitExceedMessage, onAdd = _this$props.onAdd, onDrop = _this$props.onDrop;\n\n                if (!(filesLimit > 1 && fileObjects.length + acceptedFiles.length > filesLimit)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _this.setState({\n                  openSnackBar: true,\n                  snackbarMessage: getFileLimitExceedMessage(filesLimit),\n                  snackbarVariant: 'error'\n                });\n\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                // Notify Drop event\n                if (onDrop) {\n                  onDrop(acceptedFiles, evt);\n                } // Retrieve fileObjects data\n\n\n                _context2.next = 7;\n                return Promise.all(acceptedFiles.map( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return readFile(file);\n\n                          case 2:\n                            data = _context.sent;\n                            return _context.abrupt(\"return\", {\n                              file: file,\n                              data: data\n                            });\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x3) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }()));\n\n              case 7:\n                fileObjs = _context2.sent; // Notify added files\n\n                if (onAdd) {\n                  onAdd(fileObjs);\n                } // Display message\n\n\n                message = fileObjs.reduce(function (msg, fileObj) {\n                  return msg + getFileAddedMessage(fileObj.file.name);\n                }, '');\n\n                _this.setState({\n                  openSnackBar: true,\n                  snackbarMessage: message,\n                  snackbarVariant: 'success'\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleDropRejected = function (rejectedFiles, evt) {\n      var _this$props2 = _this.props,\n          acceptedFiles = _this$props2.acceptedFiles,\n          getDropRejectMessage = _this$props2.getDropRejectMessage,\n          maxFileSize = _this$props2.maxFileSize,\n          onDropRejected = _this$props2.onDropRejected;\n      var message = '';\n      rejectedFiles.forEach(function (rejectedFile) {\n        message = getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize);\n      });\n\n      if (onDropRejected) {\n        onDropRejected(rejectedFiles, evt);\n      }\n\n      _this.setState({\n        openSnackBar: true,\n        snackbarMessage: message,\n        snackbarVariant: 'error'\n      });\n    };\n\n    _this.handleRemove = function (fileIndex) {\n      return function (event) {\n        event.stopPropagation();\n        var _this$props3 = _this.props,\n            fileObjects = _this$props3.fileObjects,\n            getFileRemovedMessage = _this$props3.getFileRemovedMessage,\n            onDelete = _this$props3.onDelete; // Find removed fileObject\n\n        var removedFileObj = fileObjects[fileIndex]; // Notify removed file\n\n        if (onDelete) {\n          onDelete(removedFileObj, fileIndex);\n        }\n\n        _this.setState({\n          openSnackBar: true,\n          snackbarMessage: getFileRemovedMessage(removedFileObj.file.name),\n          snackbarVariant: 'info'\n        });\n      };\n    };\n\n    _this.handleCloseSnackbar = function () {\n      _this.setState({\n        openSnackBar: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneAreaBase, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          acceptedFiles = _this$props4.acceptedFiles,\n          alertSnackbarProps = _this$props4.alertSnackbarProps,\n          classes = _this$props4.classes,\n          disableRejectionFeedback = _this$props4.disableRejectionFeedback,\n          dropzoneClass = _this$props4.dropzoneClass,\n          dropzoneParagraphClass = _this$props4.dropzoneParagraphClass,\n          dropzoneProps = _this$props4.dropzoneProps,\n          dropzoneText = _this$props4.dropzoneText,\n          fileObjects = _this$props4.fileObjects,\n          filesLimit = _this$props4.filesLimit,\n          getPreviewIcon = _this$props4.getPreviewIcon,\n          inputProps = _this$props4.inputProps,\n          maxFileSize = _this$props4.maxFileSize,\n          previewChipProps = _this$props4.previewChipProps,\n          previewGridClasses = _this$props4.previewGridClasses,\n          previewGridProps = _this$props4.previewGridProps,\n          previewText = _this$props4.previewText,\n          showAlerts = _this$props4.showAlerts,\n          showFileNames = _this$props4.showFileNames,\n          showFileNamesInPreview = _this$props4.showFileNamesInPreview,\n          showPreviews = _this$props4.showPreviews,\n          showPreviewsInDropzone = _this$props4.showPreviewsInDropzone,\n          useChipsForPreview = _this$props4.useChipsForPreview;\n      var _this$state = this.state,\n          openSnackBar = _this$state.openSnackBar,\n          snackbarMessage = _this$state.snackbarMessage,\n          snackbarVariant = _this$state.snackbarVariant;\n      var acceptFiles = acceptedFiles === null || acceptedFiles === void 0 ? void 0 : acceptedFiles.join(',');\n      var isMultiple = filesLimit > 1;\n      var previewsVisible = showPreviews && fileObjects.length > 0;\n      var previewsInDropzoneVisible = showPreviewsInDropzone && fileObjects.length > 0;\n      return createElement(Fragment, null, createElement(Dropzone, _extends({}, dropzoneProps, {\n        accept: acceptFiles,\n        onDropAccepted: this.handleDropAccepted,\n        onDropRejected: this.handleDropRejected,\n        maxSize: maxFileSize,\n        multiple: isMultiple\n      }), function (_ref4) {\n        var getRootProps = _ref4.getRootProps,\n            getInputProps = _ref4.getInputProps,\n            isDragActive = _ref4.isDragActive,\n            isDragReject = _ref4.isDragReject;\n        return createElement(\"div\", _extends({}, getRootProps(), {\n          className: clsx(classes.root, dropzoneClass, isDragActive && classes.active, !disableRejectionFeedback && isDragReject && classes.invalid)\n        }), createElement(\"input\", _extends({}, inputProps, getInputProps())), createElement(\"div\", {\n          className: classes.textContainer\n        }, createElement(Typography, {\n          variant: \"h5\",\n          component: \"p\",\n          className: clsx(classes.text, dropzoneParagraphClass)\n        }, dropzoneText), createElement(CloudUploadIcon, {\n          className: classes.icon\n        })), previewsInDropzoneVisible && createElement(PreviewList$1, {\n          fileObjects: fileObjects,\n          handleRemove: _this2.handleRemove,\n          getPreviewIcon: getPreviewIcon,\n          showFileNames: showFileNames,\n          useChipsForPreview: useChipsForPreview,\n          previewChipProps: previewChipProps,\n          previewGridClasses: previewGridClasses,\n          previewGridProps: previewGridProps\n        }));\n      }), previewsVisible && createElement(Fragment, null, createElement(Typography, {\n        variant: \"subtitle1\",\n        component: \"span\"\n      }, previewText), createElement(PreviewList$1, {\n        fileObjects: fileObjects,\n        handleRemove: this.handleRemove,\n        getPreviewIcon: getPreviewIcon,\n        showFileNames: showFileNamesInPreview,\n        useChipsForPreview: useChipsForPreview,\n        previewChipProps: previewChipProps,\n        previewGridClasses: previewGridClasses,\n        previewGridProps: previewGridProps\n      })), (typeof showAlerts === 'boolean' && showAlerts || Array.isArray(showAlerts) && showAlerts.includes(snackbarVariant)) && createElement(Snackbar, _extends({\n        anchorOrigin: defaultSnackbarAnchorOrigin,\n        autoHideDuration: 6000\n      }, alertSnackbarProps, {\n        open: openSnackBar,\n        onClose: this.handleCloseSnackbar\n      }), createElement(SnackbarContentWrapper$1, {\n        onClose: this.handleCloseSnackbar,\n        variant: snackbarVariant,\n        message: snackbarMessage\n      })));\n    }\n  }]);\n\n  return DropzoneAreaBase;\n}(PureComponent);\n\nDropzoneAreaBase.defaultProps = {\n  acceptedFiles: ['image/*', 'video/*', 'application/*'],\n  filesLimit: 3,\n  fileObjects: [],\n  maxFileSize: 3000000,\n  dropzoneText: 'Drag and drop a file here or click',\n  previewText: 'Preview:',\n  disableRejectionFeedback: false,\n  showPreviews: false,\n  // By default previews show up under in the dialog and inside in the standalone\n  showPreviewsInDropzone: true,\n  showFileNames: false,\n  showFileNamesInPreview: false,\n  useChipsForPreview: false,\n  previewChipProps: {},\n  previewGridClasses: {},\n  previewGridProps: {},\n  showAlerts: true,\n  alertSnackbarProps: {\n    anchorOrigin: {\n      horizontal: 'left',\n      vertical: 'bottom'\n    },\n    autoHideDuration: 6000\n  },\n  getFileLimitExceedMessage: function getFileLimitExceedMessage(filesLimit) {\n    return \"Maximum allowed number of files exceeded. Only \".concat(filesLimit, \" allowed\");\n  },\n  getFileAddedMessage: function getFileAddedMessage(fileName) {\n    return \"File \".concat(fileName, \" successfully added.\");\n  },\n  getPreviewIcon: defaultGetPreviewIcon,\n  getFileRemovedMessage: function getFileRemovedMessage(fileName) {\n    return \"File \".concat(fileName, \" removed.\");\n  },\n  getDropRejectMessage: function getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize) {\n    var message = \"File \".concat(rejectedFile.name, \" was rejected. \");\n\n    if (!acceptedFiles.includes(rejectedFile.type)) {\n      message += 'File type not supported. ';\n    }\n\n    if (rejectedFile.size > maxFileSize) {\n      message += 'File is too big. Size limit is ' + convertBytesToMbsOrKbs(maxFileSize) + '. ';\n    }\n\n    return message;\n  }\n};\nvar FileObjectShape = PropTypes.shape({\n  file: PropTypes.object,\n  data: PropTypes.any\n});\nprocess.env.NODE_ENV !== \"production\" ? DropzoneAreaBase.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** A list of file types to accept.\n   * @see See [here](https://react-dropzone.js.org/#section-accepting-specific-file-types) for more details.\n   */\n  acceptedFiles: PropTypes.arrayOf(PropTypes.string),\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /** Currently loaded files. */\n  fileObjects: PropTypes.arrayOf(FileObjectShape),\n\n  /** Maximum file size (in bytes) that the dropzone will accept. */\n  maxFileSize: PropTypes.number,\n\n  /** Text inside the dropzone. */\n  dropzoneText: PropTypes.string,\n\n  /** Custom CSS class name for dropzone container. */\n  dropzoneClass: PropTypes.string,\n\n  /** Custom CSS class name for text inside the container. */\n  dropzoneParagraphClass: PropTypes.string,\n\n  /** Disable feedback effect when dropping rejected files. */\n  disableRejectionFeedback: PropTypes.bool,\n\n  /** Shows previews **BELOW** the dropzone. */\n  showPreviews: PropTypes.bool,\n\n  /** Shows preview **INSIDE** the dropzone area. */\n  showPreviewsInDropzone: PropTypes.bool,\n\n  /** Shows file name under the dropzone image. */\n  showFileNames: PropTypes.bool,\n\n  /** Shows file name under the image. */\n  showFileNamesInPreview: PropTypes.bool,\n\n  /** Uses deletable Material-UI Chip components to display file names. */\n  useChipsForPreview: PropTypes.bool,\n\n  /**\n   * Props to pass to the Material-UI Chip components.<br/>Requires `useChipsForPreview` prop to be `true`.\n   *\n   * @see See [Material-UI Chip](https://material-ui.com/api/chip/#props) for available values.\n   */\n  previewChipProps: PropTypes.object,\n\n  /**\n   * Custom CSS classNames for preview Grid components.<br/>\n   * Should be in the form {container: string, item: string, image: string}.\n   */\n  previewGridClasses: PropTypes.object,\n\n  /**\n   * Props to pass to the Material-UI Grid components.<br/>\n   * Should be in the form {container: GridProps, item: GridProps}.\n   *\n   * @see See [Material-UI Grid](https://material-ui.com/api/grid/#props) for available GridProps values.\n   */\n  previewGridProps: PropTypes.object,\n\n  /** The label for the file preview section. */\n  previewText: PropTypes.string,\n\n  /**\n   * Shows styled Material-UI Snackbar when files are dropped, deleted or rejected.\n   *\n   * - can be a boolean (\"global\" `true` or `false` for all alerts).\n   * - can be an array, with values 'error', 'info', 'success' to select to view only certain alerts:\n   *  - showAlerts={['error']} for only errors.\n   *  - showAlerts={['error', 'info']} for both errors and info.\n   *  - showAlerts={['error', 'success', 'info']} is same as showAlerts={true}.\n   *  - showAlerts={[]} is same as showAlerts={false}.\n   */\n  showAlerts: PropTypes.oneOfType([PropTypes.bool, PropTypes.arrayOf(PropTypes.oneOf(['error', 'success', 'info']))]),\n\n  /**\n   * Props to pass to the Material-UI Snackbar components.<br/>Requires `showAlerts` prop to be `true`.\n   *\n   * @see See [Material-UI Snackbar](https://material-ui.com/api/snackbar/#props) for available values.\n   */\n  alertSnackbarProps: PropTypes.object,\n\n  /**\n   * Props to pass to the Dropzone component.\n   *\n   * @see See [Dropzone props](https://react-dropzone.js.org/#src) for available values.\n   */\n  dropzoneProps: PropTypes.object,\n\n  /**\n   * Attributes applied to the input element.\n   *\n   * @see See [MDN Input File attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Additional_attributes) for available values.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Get alert message to display when files limit is exceed.\n   *\n   * *Default*: \"Maximum allowed number of files exceeded. Only ${filesLimit} allowed\"\n   *\n   * @param {number} filesLimit The `filesLimit` currently set for the component.\n   */\n  getFileLimitExceedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a new file is added.\n   *\n   * *Default*: \"File ${fileName} successfully added.\"\n   *\n   * @param {string} fileName The newly added file name.\n   */\n  getFileAddedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a file is removed.\n   *\n   * *Default*: \"File ${fileName} removed.\"\n   *\n   * @param {string} fileName The name of the removed file.\n   */\n  getFileRemovedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a file is rejected onDrop.\n   *\n   * *Default*: \"File ${rejectedFile.name} was rejected.\"\n   *\n   * @param {Object} rejectedFile The file that got rejected\n   * @param {string[]} acceptedFiles The `acceptedFiles` prop currently set for the component\n   * @param {number} maxFileSize The `maxFileSize` prop currently set for the component\n   */\n  getDropRejectMessage: PropTypes.func,\n\n  /**\n   * A function which determines which icon to display for a file preview.\n   *\n   * *Default*: If its an image then displays a preview the image, otherwise it will display an attachment icon\n   *\n   * @param {FileObject} objectFile The file which the preview will belong to\n   * @param {Object} classes The classes for the file preview icon, in the default case we use the 'image' className.\n   */\n  getPreviewIcon: PropTypes.func,\n\n  /**\n   * Fired when new files are added to dropzone.\n   *\n   * @param {FileObject[]} newFiles The new files added to the dropzone.\n   */\n  onAdd: PropTypes.func,\n\n  /**\n   * Fired when a file is deleted from the previews panel.\n   *\n   * @param {FileObject} deletedFileObject The file that was removed.\n   * @param {number} index The index of the removed file object.\n   */\n  onDelete: PropTypes.func,\n\n  /**\n   * Fired when the user drops files into the dropzone.\n   *\n   * @param {File[]} droppedFiles All the files dropped into the dropzone.\n   * @param {Event} event The react-dropzone drop event.\n   */\n  onDrop: PropTypes.func,\n\n  /**\n   * Fired when a file is rejected because of wrong file type, size or goes beyond the filesLimit.\n   *\n   * @param {File[]} rejectedFiles All the rejected files.\n   * @param {Event} event The react-dropzone drop event.\n   */\n  onDropRejected: PropTypes.func\n} : void 0;\nvar DropzoneAreaBase$1 = withStyles(styles$2, {\n  name: 'MuiDropzoneArea'\n})(DropzoneAreaBase);\n\nvar splitDropzoneAreaProps = function splitDropzoneAreaProps(props) {\n  var clearOnUnmount = props.clearOnUnmount,\n      initialFiles = props.initialFiles,\n      onChange = props.onChange,\n      onDelete = props.onDelete,\n      dropzoneAreaProps = _objectWithoutProperties(props, [\"clearOnUnmount\", \"initialFiles\", \"onChange\", \"onDelete\"]);\n\n  return [{\n    clearOnUnmount: clearOnUnmount,\n    initialFiles: initialFiles,\n    onChange: onChange,\n    onDelete: onDelete\n  }, dropzoneAreaProps];\n};\n/**\n * This components creates an uncontrolled Material-UI Dropzone, with previews and snackbar notifications.\n *\n * It supports all props of `DropzoneAreaBase` but keeps the files state internally.\n *\n * **Note** To listen to file changes use `onChange` event handler and notice that `onDelete` returns a `File` instance instead of `FileObject`.\n */\n\n\nvar DropzoneArea = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneArea, _React$PureComponent);\n\n  function DropzoneArea() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneArea);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneArea)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileObjects: []\n    };\n\n    _this.notifyFileChange = function () {\n      var onChange = _this.props.onChange;\n      var fileObjects = _this.state.fileObjects;\n\n      if (onChange) {\n        onChange(fileObjects.map(function (fileObject) {\n          return fileObject.file;\n        }));\n      }\n    };\n\n    _this.loadInitialFiles = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var initialFiles, fileObjs;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              initialFiles = _this.props.initialFiles;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Promise.all(initialFiles.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n                  var file, data;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return createFileFromUrl(url);\n\n                        case 2:\n                          file = _context.sent;\n                          _context.next = 5;\n                          return readFile(file);\n\n                        case 5:\n                          data = _context.sent;\n                          return _context.abrupt(\"return\", {\n                            file: file,\n                            data: data\n                          });\n\n                        case 7:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n\n            case 4:\n              fileObjs = _context2.sent;\n\n              _this.setState(function (state) {\n                return {\n                  fileObjects: [].concat(state.fileObjects, fileObjs)\n                };\n              }, _this.notifyFileChange);\n\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    }));\n\n    _this.addFiles = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newFileObjects) {\n        var filesLimit;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                filesLimit = _this.props.filesLimit; // Update component state\n\n                _this.setState(function (state) {\n                  // Handle a single file\n                  if (filesLimit <= 1) {\n                    return {\n                      fileObjects: [].concat(newFileObjects[0])\n                    };\n                  } // Handle multiple files\n\n\n                  return {\n                    fileObjects: [].concat(state.fileObjects, newFileObjects)\n                  };\n                }, _this.notifyFileChange);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.deleteFile = function (removedFileObj, removedFileObjIdx) {\n      event.stopPropagation();\n      var onDelete = _this.props.onDelete;\n      var fileObjects = _this.state.fileObjects; // Calculate remaining fileObjects array\n\n      var remainingFileObjs = fileObjects.filter(function (fileObject, i) {\n        return i !== removedFileObjIdx;\n      }); // Notify removed file\n\n      if (onDelete) {\n        onDelete(removedFileObj.file);\n      } // Update local state\n\n\n      _this.setState({\n        fileObjects: remainingFileObjs\n      }, _this.notifyFileChange);\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneArea, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInitialFiles();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var clearOnUnmount = this.props.clearOnUnmount;\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        }, this.notifyFileChange);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _splitDropzoneAreaPro = splitDropzoneAreaProps(this.props),\n          _splitDropzoneAreaPro2 = _slicedToArray(_splitDropzoneAreaPro, 2),\n          dropzoneAreaProps = _splitDropzoneAreaPro2[1];\n\n      var fileObjects = this.state.fileObjects;\n      return createElement(DropzoneAreaBase$1, _extends({}, dropzoneAreaProps, {\n        fileObjects: fileObjects,\n        onAdd: this.addFiles,\n        onDelete: this.deleteFile\n      }));\n    }\n  }]);\n\n  return DropzoneArea;\n}(PureComponent);\n\nDropzoneArea.defaultProps = {\n  clearOnUnmount: true,\n  filesLimit: 3,\n  initialFiles: []\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneArea.propTypes = _extends({}, DropzoneAreaBase$1.propTypes, {\n  /** Clear uploaded files when component is unmounted. */\n  clearOnUnmount: PropTypes.bool,\n\n  /** List of URLs of already uploaded images.<br/>**Note:** Please take care of CORS. */\n  initialFiles: PropTypes.arrayOf(PropTypes.string),\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /**\n   * Fired when the files inside dropzone change.\n   *\n   * @param {File[]} loadedFiles All the files currently loaded into the dropzone.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Fired when a file is deleted from the previews panel.\n   *\n   * @param {File} deletedFile The file that was removed.\n   */\n  onDelete: PropTypes.func\n}) : void 0;\n\nfunction splitDropzoneDialogProps(allProps) {\n  var cancelButtonText = allProps.cancelButtonText,\n      dialogProps = allProps.dialogProps,\n      dialogTitle = allProps.dialogTitle,\n      fullWidth = allProps.fullWidth,\n      maxWidth = allProps.maxWidth,\n      onClose = allProps.onClose,\n      onSave = allProps.onSave,\n      open = allProps.open,\n      submitButtonText = allProps.submitButtonText,\n      dropzoneAreaProps = _objectWithoutProperties(allProps, [\"cancelButtonText\", \"dialogProps\", \"dialogTitle\", \"fullWidth\", \"maxWidth\", \"onClose\", \"onSave\", \"open\", \"submitButtonText\"]);\n\n  return [{\n    cancelButtonText: cancelButtonText,\n    dialogProps: dialogProps,\n    dialogTitle: dialogTitle,\n    fullWidth: fullWidth,\n    maxWidth: maxWidth,\n    onClose: onClose,\n    onSave: onSave,\n    open: open,\n    submitButtonText: submitButtonText\n  }, dropzoneAreaProps];\n}\n/**\n * This component provides the DropzoneArea inside of a Material-UI Dialog.\n *\n * It supports all the Props and Methods from `DropzoneAreaBase`.\n */\n\n\nvar DropzoneDialogBase = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneDialogBase, _React$PureComponent);\n\n  function DropzoneDialogBase() {\n    _classCallCheck(this, DropzoneDialogBase);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DropzoneDialogBase).apply(this, arguments));\n  }\n\n  _createClass(DropzoneDialogBase, [{\n    key: \"render\",\n    value: function render() {\n      var _splitDropzoneDialogP = splitDropzoneDialogProps(this.props),\n          _splitDropzoneDialogP2 = _slicedToArray(_splitDropzoneDialogP, 2),\n          dropzoneDialogProps = _splitDropzoneDialogP2[0],\n          dropzoneAreaProps = _splitDropzoneDialogP2[1];\n\n      var cancelButtonText = dropzoneDialogProps.cancelButtonText,\n          dialogProps = dropzoneDialogProps.dialogProps,\n          dialogTitle = dropzoneDialogProps.dialogTitle,\n          fullWidth = dropzoneDialogProps.fullWidth,\n          maxWidth = dropzoneDialogProps.maxWidth,\n          onClose = dropzoneDialogProps.onClose,\n          onSave = dropzoneDialogProps.onSave,\n          open = dropzoneDialogProps.open,\n          submitButtonText = dropzoneDialogProps.submitButtonText; // Submit button state\n\n      var submitDisabled = dropzoneAreaProps.fileObjects.length === 0;\n      return createElement(Dialog, _extends({}, dialogProps, {\n        fullWidth: fullWidth,\n        maxWidth: maxWidth,\n        onClose: onClose,\n        open: open\n      }), createElement(DialogTitle, null, dialogTitle), createElement(DialogContent, null, createElement(DropzoneAreaBase$1, dropzoneAreaProps)), createElement(DialogActions, null, createElement(Button, {\n        color: \"primary\",\n        onClick: onClose\n      }, cancelButtonText), createElement(Button, {\n        color: \"primary\",\n        disabled: submitDisabled,\n        onClick: onSave\n      }, submitButtonText)));\n    }\n  }]);\n\n  return DropzoneDialogBase;\n}(PureComponent);\n\nDropzoneDialogBase.defaultProps = {\n  open: false,\n  dialogTitle: 'Upload file',\n  dialogProps: {},\n  fullWidth: true,\n  maxWidth: 'sm',\n  cancelButtonText: 'Cancel',\n  submitButtonText: 'Submit',\n  showPreviews: true,\n  showPreviewsInDropzone: false,\n  showFileNamesInPreview: true\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneDialogBase.propTypes = _extends({}, DropzoneAreaBase$1.propTypes, {\n  /** Sets whether the dialog is open or closed. */\n  open: PropTypes.bool,\n\n  /** The Dialog title. */\n  dialogTitle: PropTypes.string,\n\n  /**\n   * Props to pass to the Material-UI Dialog components.\n   * @see See [Material-UI Dialog](https://material-ui.com/api/dialog/#props) for available values.\n   */\n  dialogProps: PropTypes.object,\n\n  /**\n   * If `true`, the dialog stretches to `maxWidth`.<br/>\n   * Notice that the dialog width grow is limited by the default margin.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the dialog. The dialog width grows with the size of the screen.<br/>\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.string,\n\n  /** Cancel button text in dialog. */\n  cancelButtonText: PropTypes.string,\n\n  /** Submit button text in dialog. */\n  submitButtonText: PropTypes.string,\n\n  /**\n   * Fired when the modal is closed.\n   *\n   * @param {SyntheticEvent} event The react `SyntheticEvent`\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Fired when the user clicks the Submit button.\n   *\n   * @param {SyntheticEvent} event The react `SyntheticEvent`\n   */\n  onSave: PropTypes.func,\n\n  /**\n   * Shows previews **BELOW** the dropzone.<br/>\n   * **Note:** By default previews show up under in the Dialog and inside in the standalone.\n   */\n  showPreviews: PropTypes.bool,\n\n  /** Shows preview **INSIDE** the dropzone area. */\n  showPreviewsInDropzone: PropTypes.bool,\n\n  /** Shows file name under the image. */\n  showFileNamesInPreview: PropTypes.bool\n}) : void 0;\n/**\n * This component provides an uncontrolled version of the DropzoneDialogBase component.\n *\n * It supports all the Props and Methods from `DropzoneDialogBase` but keeps the files state internally.\n *\n * **Note** The `onSave` handler also returns `File[]` with all the accepted files.\n */\n\nvar DropzoneDialog = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneDialog, _React$PureComponent);\n\n  function DropzoneDialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileObjects: []\n    };\n\n    _this.notifyFileChange = function () {\n      var onChange = _this.props.onChange;\n      var fileObjects = _this.state.fileObjects;\n\n      if (onChange) {\n        onChange(fileObjects.map(function (fileObject) {\n          return fileObject.file;\n        }));\n      }\n    };\n\n    _this.loadInitialFiles = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var initialFiles, fileObjs;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              initialFiles = _this.props.initialFiles;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Promise.all(initialFiles.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n                  var file, data;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return createFileFromUrl(url);\n\n                        case 2:\n                          file = _context.sent;\n                          _context.next = 5;\n                          return readFile(file);\n\n                        case 5:\n                          data = _context.sent;\n                          return _context.abrupt(\"return\", {\n                            file: file,\n                            data: data\n                          });\n\n                        case 7:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n\n            case 4:\n              fileObjs = _context2.sent;\n\n              _this.setState(function (state) {\n                return {\n                  fileObjects: [].concat(state.fileObjects, fileObjs)\n                };\n              }, _this.notifyFileChange);\n\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    }));\n\n    _this.addFiles = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newFileObjects) {\n        var filesLimit;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                filesLimit = _this.props.filesLimit; // Update component state\n\n                _this.setState(function (state) {\n                  // Handle a single file\n                  if (filesLimit <= 1) {\n                    return {\n                      fileObjects: [].concat(newFileObjects[0])\n                    };\n                  } // Handle multiple files\n\n\n                  return {\n                    fileObjects: [].concat(state.fileObjects, newFileObjects)\n                  };\n                }, _this.notifyFileChange);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.deleteFile = function (removedFileObj, removedFileObjIdx) {\n      event.stopPropagation();\n      var onDelete = _this.props.onDelete;\n      var fileObjects = _this.state.fileObjects; // Calculate remaining fileObjects array\n\n      var remainingFileObjs = fileObjects.filter(function (fileObject, i) {\n        return i !== removedFileObjIdx;\n      }); // Notify removed file\n\n      if (onDelete) {\n        onDelete(removedFileObj.file);\n      } // Update local state\n\n\n      _this.setState({\n        fileObjects: remainingFileObjs\n      }, _this.notifyFileChange);\n    };\n\n    _this.handleClose = function (evt) {\n      var _this$props = _this.props,\n          clearOnUnmount = _this$props.clearOnUnmount,\n          onClose = _this$props.onClose;\n\n      if (onClose) {\n        onClose(evt);\n      }\n\n      if (clearOnUnmount) {\n        _this.setState({\n          fileObjects: []\n        }, _this.notifyFileChange);\n      }\n    };\n\n    _this.handleSave = function (evt) {\n      var _this$props2 = _this.props,\n          clearOnUnmount = _this$props2.clearOnUnmount,\n          onSave = _this$props2.onSave;\n      var fileObjects = _this.state.fileObjects;\n\n      if (onSave) {\n        onSave(fileObjects.map(function (fileObject) {\n          return fileObject.file;\n        }), evt);\n      }\n\n      if (clearOnUnmount) {\n        _this.setState({\n          fileObjects: []\n        }, _this.notifyFileChange);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInitialFiles();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var clearOnUnmount = this.props.clearOnUnmount;\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        }, this.notifyFileChange);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fileObjects = this.state.fileObjects;\n      return createElement(DropzoneDialogBase, _extends({}, this.props, {\n        fileObjects: fileObjects,\n        onAdd: this.addFiles,\n        onDelete: this.deleteFile,\n        onClose: this.handleClose,\n        onSave: this.handleSave\n      }));\n    }\n  }]);\n\n  return DropzoneDialog;\n}(PureComponent);\n\nDropzoneDialog.defaultProps = {\n  clearOnUnmount: true,\n  filesLimit: 3,\n  initialFiles: []\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneDialog.propTypes = _extends({}, DropzoneDialogBase.propTypes, {\n  /** Clear uploaded files when component is unmounted. */\n  clearOnUnmount: PropTypes.bool,\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /** List of URLs of already uploaded images.<br/>**Note:** Please take care of CORS. */\n  initialFiles: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Fired when the user clicks the Submit button.\n   *\n   * @param {File[]} files All the files currently inside the Dropzone.\n   * @param {SyntheticEvent} event The react `SyntheticEvent`.\n   */\n  onSave: PropTypes.func\n}) : void 0;\nexport { DropzoneArea, DropzoneAreaBase$1 as DropzoneAreaBase, DropzoneDialog, DropzoneDialogBase };","map":{"version":3,"sources":["../src/helpers.js","../src/components/PreviewList.js","../src/components/SnackbarContentWrapper.js","../src/components/DropzoneAreaBase.js","../src/components/DropzoneArea.js","../src/components/DropzoneDialogBase.js","../src/components/DropzoneDialog.js"],"names":["file","size","filesize","response","fetch","data","metadata","type","filename","url","reader","resolve","event","reject","styles","palette","shape","spacing","root","imageContainer","position","zIndex","textAlign","opacity","image","height","width","maxWidth","color","transition","boxSizing","boxShadow","borderRadius","removeButton","top","right","fileObjects","handleRemove","showFileNames","useChipsForPreview","previewChipProps","previewGridClasses","previewGridProps","classes","getPreviewIcon","i","fileObject","clsx","React.createElement","PropTypes","bool","name","variantIcon","success","warning","error","info","InfoIcon","backgroundColor","theme","main","message","display","alignItems","icon","fontSize","marginRight","closeButton","className","onClose","variant","other","props","Icon","isRequired","backgroundPosition","minHeight","border","borderColor","cursor","overflow","active","animation","backgroundImage","backgroundSize","light","invalid","textContainer","text","marginBottom","marginTop","primary","defaultSnackbarAnchorOrigin","horizontal","vertical","defaultGetPreviewIcon","isImage","DropzoneAreaBase","React","state","openSnackBar","snackbarMessage","snackbarVariant","handleDropAccepted","filesLimit","getFileAddedMessage","getFileLimitExceedMessage","onAdd","onDrop","acceptedFiles","fileObjs","readFile","msg","fileObj","handleDropRejected","getDropRejectMessage","maxFileSize","onDropRejected","rejectedFiles","getFileRemovedMessage","onDelete","removedFileObj","handleCloseSnackbar","alertSnackbarProps","disableRejectionFeedback","dropzoneClass","dropzoneParagraphClass","dropzoneProps","dropzoneText","inputProps","previewText","showAlerts","showFileNamesInPreview","showPreviews","showPreviewsInDropzone","acceptFiles","isMultiple","previewsVisible","previewsInDropzoneVisible","getRootProps","getInputProps","isDragActive","isDragReject","Array","anchorOrigin","autoHideDuration","rejectedFile","convertBytesToMbsOrKbs","FileObjectShape","any","func","splitDropzoneAreaProps","clearOnUnmount","initialFiles","onChange","dropzoneAreaProps","DropzoneArea","notifyFileChange","loadInitialFiles","createFileFromUrl","console","addFiles","newFileObjects","deleteFile","remainingFileObjs","cancelButtonText","dialogProps","dialogTitle","fullWidth","onSave","open","submitButtonText","allProps","DropzoneDialogBase","dropzoneDialogProps","splitDropzoneDialogProps","submitDisabled","DropzoneDialog","handleClose","handleSave"],"mappings":"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","sourcesContent":["export function isImage(file) {\n    if (file.type.split('/')[0] === 'image') {\n        return true;\n    }\n}\n\nexport function convertBytesToMbsOrKbs(filesize) {\n    let size = '';\n    // I know, not technically correct...\n    if (filesize >= 1000000) {\n        size = (filesize / 1000000) + ' megabytes';\n    } else if (filesize >= 1000) {\n        size = (filesize / 1000) + ' kilobytes';\n    } else {\n        size = filesize + ' bytes';\n    }\n    return size;\n}\n\nexport async function createFileFromUrl(url) {\n    const response = await fetch(url);\n    const data = await response.blob();\n    const metadata = {type: data.type};\n    const filename = url.replace(/\\?.+/, '').split('/').pop();\n    return new File([data], filename, metadata);\n}\n\nexport function readFile(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            resolve(event?.target?.result);\n        };\n        reader.onerror = (event) => {\n            reader.abort();\n            reject(event);\n        };\n        reader.readAsDataURL(file);\n    });\n}\n","import Chip from '@material-ui/core/Chip';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\n\nconst styles = ({palette, shape, spacing}) => ({\n    root: {},\n    imageContainer: {\n        position: 'relative',\n        zIndex: 10,\n        textAlign: 'center',\n        '&:hover $image': {\n            opacity: 0.3,\n        },\n        '&:hover $removeButton': {\n            opacity: 1,\n        },\n    },\n    image: {\n        height: 100,\n        width: 'initial',\n        maxWidth: '100%',\n        color: palette.text.primary,\n        transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n        boxSizing: 'border-box',\n        boxShadow: 'rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px',\n        borderRadius: shape.borderRadius,\n        zIndex: 5,\n        opacity: 1,\n    },\n    removeButton: {\n        transition: '.5s ease',\n        position: 'absolute',\n        opacity: 0,\n        top: spacing(-1),\n        right: spacing(-1),\n        width: 40,\n        height: 40,\n    },\n});\n\nfunction PreviewList({\n    fileObjects,\n    handleRemove,\n    showFileNames,\n    useChipsForPreview,\n    previewChipProps,\n    previewGridClasses,\n    previewGridProps,\n    classes,\n    getPreviewIcon,\n}) {\n    if (useChipsForPreview) {\n        return (\n            fileObjects.map((fileObject, i) => (\n                <div key={i}>\n                    <Chip\n                        variant=\"outlined\"\n                        {...previewChipProps}\n                        label={fileObject.file.name}\n                        onDelete={handleRemove(i)}\n                    />\n                </div>\n            ))\n        );\n    }\n\n    return (\n        <Grid\n            spacing={8}\n            {...previewGridProps.container}\n            container={true}\n            className={clsx(classes.root, previewGridClasses.container)}\n        >\n            {fileObjects.map((fileObject, i) => {\n                return (\n                    <Grid\n                        xs={4}\n                        {...previewGridProps.item}\n                        item={true}\n                        key={`${fileObject.file?.name ?? 'file'}-${i}`}\n                        className={clsx(classes.imageContainer, previewGridClasses.item)}\n                    >\n                        {getPreviewIcon(fileObject, classes)}\n\n                        {showFileNames && (\n                            <Typography variant=\"body1\" component=\"p\">\n                                {fileObject.file.name}\n                            </Typography>\n                        )}\n\n                        <Fab\n                            onClick={handleRemove(i)}\n                            aria-label=\"Delete\"\n                            className={classes.removeButton}\n                        >\n                            <DeleteIcon />\n                        </Fab>\n                    </Grid>\n                );\n            })}\n        </Grid>\n    );\n}\n\nPreviewList.propTypes = {\n    classes: PropTypes.object.isRequired,\n    fileObjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n    getPreviewIcon: PropTypes.func.isRequired,\n    handleRemove: PropTypes.func.isRequired,\n    previewChipProps: PropTypes.object,\n    previewGridClasses: PropTypes.object,\n    previewGridProps: PropTypes.object,\n    showFileNames: PropTypes.bool,\n    useChipsForPreview: PropTypes.bool,\n};\n\nexport default withStyles(styles, {name: 'MuiDropzonePreviewList'})(PreviewList);\n","import IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport {withStyles} from '@material-ui/core/styles';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst styles = (theme) => ({\n    success: {\n        backgroundColor: theme.palette.success.main,\n    },\n    error: {\n        backgroundColor: theme.palette.error.main,\n    },\n    info: {\n        backgroundColor: theme.palette.info.main,\n    },\n    warning: {\n        backgroundColor: theme.palette.warning.main,\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    icon: {\n        fontSize: 20,\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    closeButton: {},\n});\n\nfunction SnackbarContentWrapper(props) {\n    const {classes, className, message, onClose, variant, ...other} = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={classes.icon} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    className={classes.closeButton}\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nSnackbarContentWrapper.propTypes = {\n    classes: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nexport default withStyles(styles, {name: 'MuiDropzoneSnackbar'})(SnackbarContentWrapper);\n","import Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core/styles';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {Fragment} from 'react';\nimport Dropzone from 'react-dropzone';\nimport {convertBytesToMbsOrKbs, isImage, readFile} from '../helpers';\nimport PreviewList from './PreviewList';\nimport SnackbarContentWrapper from './SnackbarContentWrapper';\n\nconst styles = ({palette, shape, spacing}) => ({\n    '@keyframes progress': {\n        '0%': {\n            backgroundPosition: '0 0',\n        },\n        '100%': {\n            backgroundPosition: '-70px 0',\n        },\n    },\n    root: {\n        position: 'relative',\n        width: '100%',\n        minHeight: '250px',\n        backgroundColor: palette.background.paper,\n        border: 'dashed',\n        borderColor: palette.divider,\n        borderRadius: shape.borderRadius,\n        boxSizing: 'border-box',\n        cursor: 'pointer',\n        overflow: 'hidden',\n    },\n    active: {\n        animation: '$progress 2s linear infinite !important',\n        // eslint-disable-next-line max-len\n        backgroundImage: `repeating-linear-gradient(-45deg, ${palette.background.paper}, ${palette.background.paper} 25px, ${palette.divider} 25px, ${palette.divider} 50px)`,\n        backgroundSize: '150% 100%',\n        border: 'solid',\n        borderColor: palette.primary.light,\n    },\n    invalid: {\n        // eslint-disable-next-line max-len\n        backgroundImage: `repeating-linear-gradient(-45deg, ${palette.error.light}, ${palette.error.light} 25px, ${palette.error.dark} 25px, ${palette.error.dark} 50px)`,\n        borderColor: palette.error.main,\n    },\n    textContainer: {\n        textAlign: 'center',\n    },\n    text: {\n        marginBottom: spacing(3),\n        marginTop: spacing(3),\n    },\n    icon: {\n        width: 51,\n        height: 51,\n        color: palette.text.primary,\n    },\n});\n\nconst defaultSnackbarAnchorOrigin = {\n    horizontal: 'left',\n    vertical: 'bottom',\n};\n\nconst defaultGetPreviewIcon = (fileObject, classes) => {\n    if (isImage(fileObject.file)) {\n        return (<img\n            className={classes.image}\n            role=\"presentation\"\n            src={fileObject.data}\n        />);\n    }\n\n    return <AttachFileIcon className={classes.image} />;\n};\n\n/**\n * This components creates a Material-UI Dropzone, with previews and snackbar notifications.\n */\nclass DropzoneAreaBase extends React.PureComponent {\n    state = {\n        openSnackBar: false,\n        snackbarMessage: '',\n        snackbarVariant: 'success',\n    };\n\n    handleDropAccepted = async(acceptedFiles, evt) => {\n        const {fileObjects, filesLimit, getFileAddedMessage, getFileLimitExceedMessage, onAdd, onDrop} = this.props;\n\n        if (filesLimit > 1 && fileObjects.length + acceptedFiles.length > filesLimit) {\n            this.setState({\n                openSnackBar: true,\n                snackbarMessage: getFileLimitExceedMessage(filesLimit),\n                snackbarVariant: 'error',\n            });\n            return;\n        }\n\n        // Notify Drop event\n        if (onDrop) {\n            onDrop(acceptedFiles, evt);\n        }\n\n        // Retrieve fileObjects data\n        const fileObjs = await Promise.all(\n            acceptedFiles.map(async(file) => {\n                const data = await readFile(file);\n                return {\n                    file,\n                    data,\n                };\n            })\n        );\n\n        // Notify added files\n        if (onAdd) {\n            onAdd(fileObjs);\n        }\n\n        // Display message\n        const message = fileObjs.reduce((msg, fileObj) => msg + getFileAddedMessage(fileObj.file.name), '');\n        this.setState({\n            openSnackBar: true,\n            snackbarMessage: message,\n            snackbarVariant: 'success',\n        });\n    }\n\n    handleDropRejected = (rejectedFiles, evt) => {\n        const {acceptedFiles, getDropRejectMessage, maxFileSize, onDropRejected} = this.props;\n\n        let message = '';\n        rejectedFiles.forEach((rejectedFile) => {\n            message = getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize);\n        });\n\n        if (onDropRejected) {\n            onDropRejected(rejectedFiles, evt);\n        }\n\n        this.setState({\n            openSnackBar: true,\n            snackbarMessage: message,\n            snackbarVariant: 'error',\n        });\n    }\n\n    handleRemove = (fileIndex) => (event) => {\n        event.stopPropagation();\n\n        const {fileObjects, getFileRemovedMessage, onDelete} = this.props;\n\n        // Find removed fileObject\n        const removedFileObj = fileObjects[fileIndex];\n\n        // Notify removed file\n        if (onDelete) {\n            onDelete(removedFileObj, fileIndex);\n        }\n\n        this.setState({\n            openSnackBar: true,\n            snackbarMessage: getFileRemovedMessage(removedFileObj.file.name),\n            snackbarVariant: 'info',\n        });\n    };\n\n    handleCloseSnackbar = () => {\n        this.setState({\n            openSnackBar: false,\n        });\n    };\n\n    render() {\n        const {\n            acceptedFiles,\n            alertSnackbarProps,\n            classes,\n            disableRejectionFeedback,\n            dropzoneClass,\n            dropzoneParagraphClass,\n            dropzoneProps,\n            dropzoneText,\n            fileObjects,\n            filesLimit,\n            getPreviewIcon,\n            inputProps,\n            maxFileSize,\n            previewChipProps,\n            previewGridClasses,\n            previewGridProps,\n            previewText,\n            showAlerts,\n            showFileNames,\n            showFileNamesInPreview,\n            showPreviews,\n            showPreviewsInDropzone,\n            useChipsForPreview,\n        } = this.props;\n        const {openSnackBar, snackbarMessage, snackbarVariant} = this.state;\n\n        const acceptFiles = acceptedFiles?.join(',');\n        const isMultiple = filesLimit > 1;\n        const previewsVisible = showPreviews && fileObjects.length > 0;\n        const previewsInDropzoneVisible = showPreviewsInDropzone && fileObjects.length > 0;\n\n        return (\n            <Fragment>\n                <Dropzone\n                    {...dropzoneProps}\n                    accept={acceptFiles}\n                    onDropAccepted={this.handleDropAccepted}\n                    onDropRejected={this.handleDropRejected}\n                    maxSize={maxFileSize}\n                    multiple={isMultiple}\n                >\n                    {({getRootProps, getInputProps, isDragActive, isDragReject}) => (\n                        <div\n                            {...getRootProps()}\n                            className={clsx(\n                                classes.root,\n                                dropzoneClass,\n                                isDragActive && classes.active,\n                                (!disableRejectionFeedback && isDragReject) && classes.invalid,\n                            )}\n                        >\n                            <input {...inputProps} {...getInputProps()} />\n\n                            <div className={classes.textContainer}>\n                                <Typography\n                                    variant=\"h5\"\n                                    component=\"p\"\n                                    className={clsx(classes.text, dropzoneParagraphClass)}\n                                >\n                                    {dropzoneText}\n                                </Typography>\n                                <CloudUploadIcon className={classes.icon} />\n                            </div>\n\n                            {previewsInDropzoneVisible &&\n                                <PreviewList\n                                    fileObjects={fileObjects}\n                                    handleRemove={this.handleRemove}\n                                    getPreviewIcon={getPreviewIcon}\n                                    showFileNames={showFileNames}\n                                    useChipsForPreview={useChipsForPreview}\n                                    previewChipProps={previewChipProps}\n                                    previewGridClasses={previewGridClasses}\n                                    previewGridProps={previewGridProps}\n                                />\n                            }\n                        </div>\n                    )}\n                </Dropzone>\n\n                {previewsVisible &&\n                    <Fragment>\n                        <Typography variant=\"subtitle1\" component=\"span\">\n                            {previewText}\n                        </Typography>\n\n                        <PreviewList\n                            fileObjects={fileObjects}\n                            handleRemove={this.handleRemove}\n                            getPreviewIcon={getPreviewIcon}\n                            showFileNames={showFileNamesInPreview}\n                            useChipsForPreview={useChipsForPreview}\n                            previewChipProps={previewChipProps}\n                            previewGridClasses={previewGridClasses}\n                            previewGridProps={previewGridProps}\n                        />\n                    </Fragment>\n                }\n\n                {((typeof showAlerts === 'boolean' && showAlerts) ||\n                    (Array.isArray(showAlerts) && showAlerts.includes(snackbarVariant))) &&\n                    <Snackbar\n                        anchorOrigin={defaultSnackbarAnchorOrigin}\n                        autoHideDuration={6000}\n                        {...alertSnackbarProps}\n                        open={openSnackBar}\n                        onClose={this.handleCloseSnackbar}\n                    >\n                        <SnackbarContentWrapper\n                            onClose={this.handleCloseSnackbar}\n                            variant={snackbarVariant}\n                            message={snackbarMessage}\n                        />\n                    </Snackbar>\n                }\n            </Fragment>\n        );\n    }\n}\n\nDropzoneAreaBase.defaultProps = {\n    acceptedFiles: ['image/*', 'video/*', 'application/*'],\n    filesLimit: 3,\n    fileObjects: [],\n    maxFileSize: 3000000,\n    dropzoneText: 'Drag and drop a file here or click',\n    previewText: 'Preview:',\n    disableRejectionFeedback: false,\n    showPreviews: false, // By default previews show up under in the dialog and inside in the standalone\n    showPreviewsInDropzone: true,\n    showFileNames: false,\n    showFileNamesInPreview: false,\n    useChipsForPreview: false,\n    previewChipProps: {},\n    previewGridClasses: {},\n    previewGridProps: {},\n    showAlerts: true,\n    alertSnackbarProps: {\n        anchorOrigin: {\n            horizontal: 'left',\n            vertical: 'bottom',\n        },\n        autoHideDuration: 6000,\n    },\n    getFileLimitExceedMessage: (filesLimit) => (`Maximum allowed number of files exceeded. Only ${filesLimit} allowed`),\n    getFileAddedMessage: (fileName) => (`File ${fileName} successfully added.`),\n    getPreviewIcon: defaultGetPreviewIcon,\n    getFileRemovedMessage: (fileName) => (`File ${fileName} removed.`),\n    getDropRejectMessage: (rejectedFile, acceptedFiles, maxFileSize) => {\n        let message = `File ${rejectedFile.name} was rejected. `;\n        if (!acceptedFiles.includes(rejectedFile.type)) {\n            message += 'File type not supported. ';\n        }\n        if (rejectedFile.size > maxFileSize) {\n            message += 'File is too big. Size limit is ' + convertBytesToMbsOrKbs(maxFileSize) + '. ';\n        }\n        return message;\n    },\n};\n\nexport const FileObjectShape = PropTypes.shape({\n    file: PropTypes.object,\n    data: PropTypes.any,\n});\n\nDropzoneAreaBase.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** A list of file types to accept.\n     * @see See [here](https://react-dropzone.js.org/#section-accepting-specific-file-types) for more details.\n     */\n    acceptedFiles: PropTypes.arrayOf(PropTypes.string),\n    /** Maximum number of files that can be loaded into the dropzone. */\n    filesLimit: PropTypes.number,\n    /** Currently loaded files. */\n    fileObjects: PropTypes.arrayOf(FileObjectShape),\n    /** Maximum file size (in bytes) that the dropzone will accept. */\n    maxFileSize: PropTypes.number,\n    /** Text inside the dropzone. */\n    dropzoneText: PropTypes.string,\n    /** Custom CSS class name for dropzone container. */\n    dropzoneClass: PropTypes.string,\n    /** Custom CSS class name for text inside the container. */\n    dropzoneParagraphClass: PropTypes.string,\n    /** Disable feedback effect when dropping rejected files. */\n    disableRejectionFeedback: PropTypes.bool,\n    /** Shows previews **BELOW** the dropzone. */\n    showPreviews: PropTypes.bool,\n    /** Shows preview **INSIDE** the dropzone area. */\n    showPreviewsInDropzone: PropTypes.bool,\n    /** Shows file name under the dropzone image. */\n    showFileNames: PropTypes.bool,\n    /** Shows file name under the image. */\n    showFileNamesInPreview: PropTypes.bool,\n    /** Uses deletable Material-UI Chip components to display file names. */\n    useChipsForPreview: PropTypes.bool,\n    /**\n     * Props to pass to the Material-UI Chip components.<br/>Requires `useChipsForPreview` prop to be `true`.\n     *\n     * @see See [Material-UI Chip](https://material-ui.com/api/chip/#props) for available values.\n     */\n    previewChipProps: PropTypes.object,\n    /**\n     * Custom CSS classNames for preview Grid components.<br/>\n     * Should be in the form {container: string, item: string, image: string}.\n     */\n    previewGridClasses: PropTypes.object,\n    /**\n     * Props to pass to the Material-UI Grid components.<br/>\n     * Should be in the form {container: GridProps, item: GridProps}.\n     *\n     * @see See [Material-UI Grid](https://material-ui.com/api/grid/#props) for available GridProps values.\n     */\n    previewGridProps: PropTypes.object,\n    /** The label for the file preview section. */\n    previewText: PropTypes.string,\n    /**\n     * Shows styled Material-UI Snackbar when files are dropped, deleted or rejected.\n     *\n     * - can be a boolean (\"global\" `true` or `false` for all alerts).\n     * - can be an array, with values 'error', 'info', 'success' to select to view only certain alerts:\n     *  - showAlerts={['error']} for only errors.\n     *  - showAlerts={['error', 'info']} for both errors and info.\n     *  - showAlerts={['error', 'success', 'info']} is same as showAlerts={true}.\n     *  - showAlerts={[]} is same as showAlerts={false}.\n     */\n    showAlerts: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.arrayOf(PropTypes.oneOf(['error', 'success', 'info'])),\n    ]),\n    /**\n     * Props to pass to the Material-UI Snackbar components.<br/>Requires `showAlerts` prop to be `true`.\n     *\n     * @see See [Material-UI Snackbar](https://material-ui.com/api/snackbar/#props) for available values.\n     */\n    alertSnackbarProps: PropTypes.object,\n    /**\n     * Props to pass to the Dropzone component.\n     *\n     * @see See [Dropzone props](https://react-dropzone.js.org/#src) for available values.\n     */\n    dropzoneProps: PropTypes.object,\n    /**\n     * Attributes applied to the input element.\n     *\n     * @see See [MDN Input File attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Additional_attributes) for available values.\n     */\n    inputProps: PropTypes.object,\n    /**\n     * Get alert message to display when files limit is exceed.\n     *\n     * *Default*: \"Maximum allowed number of files exceeded. Only ${filesLimit} allowed\"\n     *\n     * @param {number} filesLimit The `filesLimit` currently set for the component.\n     */\n    getFileLimitExceedMessage: PropTypes.func,\n    /**\n     * Get alert message to display when a new file is added.\n     *\n     * *Default*: \"File ${fileName} successfully added.\"\n     *\n     * @param {string} fileName The newly added file name.\n     */\n    getFileAddedMessage: PropTypes.func,\n    /**\n     * Get alert message to display when a file is removed.\n     *\n     * *Default*: \"File ${fileName} removed.\"\n     *\n     * @param {string} fileName The name of the removed file.\n     */\n    getFileRemovedMessage: PropTypes.func,\n    /**\n     * Get alert message to display when a file is rejected onDrop.\n     *\n     * *Default*: \"File ${rejectedFile.name} was rejected.\"\n     *\n     * @param {Object} rejectedFile The file that got rejected\n     * @param {string[]} acceptedFiles The `acceptedFiles` prop currently set for the component\n     * @param {number} maxFileSize The `maxFileSize` prop currently set for the component\n     */\n    getDropRejectMessage: PropTypes.func,\n    /**\n     * A function which determines which icon to display for a file preview.\n     *\n     * *Default*: If its an image then displays a preview the image, otherwise it will display an attachment icon\n     *\n     * @param {FileObject} objectFile The file which the preview will belong to\n     * @param {Object} classes The classes for the file preview icon, in the default case we use the 'image' className.\n     */\n    getPreviewIcon: PropTypes.func,\n    /**\n     * Fired when new files are added to dropzone.\n     *\n     * @param {FileObject[]} newFiles The new files added to the dropzone.\n     */\n    onAdd: PropTypes.func,\n    /**\n     * Fired when a file is deleted from the previews panel.\n     *\n     * @param {FileObject} deletedFileObject The file that was removed.\n     * @param {number} index The index of the removed file object.\n     */\n    onDelete: PropTypes.func,\n    /**\n     * Fired when the user drops files into the dropzone.\n     *\n     * @param {File[]} droppedFiles All the files dropped into the dropzone.\n     * @param {Event} event The react-dropzone drop event.\n     */\n    onDrop: PropTypes.func,\n    /**\n     * Fired when a file is rejected because of wrong file type, size or goes beyond the filesLimit.\n     *\n     * @param {File[]} rejectedFiles All the rejected files.\n     * @param {Event} event The react-dropzone drop event.\n     */\n    onDropRejected: PropTypes.func,\n};\n\nexport default withStyles(styles, {name: 'MuiDropzoneArea'})(DropzoneAreaBase);\n","import PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {createFileFromUrl, readFile} from '../helpers';\n\nimport DropzoneAreaBase from './DropzoneAreaBase';\n\nconst splitDropzoneAreaProps = (props) => {\n    const {clearOnUnmount, initialFiles, onChange, onDelete, ...dropzoneAreaProps} = props;\n    return [{clearOnUnmount, initialFiles, onChange, onDelete}, dropzoneAreaProps];\n};\n\n/**\n * This components creates an uncontrolled Material-UI Dropzone, with previews and snackbar notifications.\n *\n * It supports all props of `DropzoneAreaBase` but keeps the files state internally.\n *\n * **Note** To listen to file changes use `onChange` event handler and notice that `onDelete` returns a `File` instance instead of `FileObject`.\n */\nclass DropzoneArea extends React.PureComponent {\n    state = {\n        fileObjects: [],\n    }\n\n    componentDidMount() {\n        this.loadInitialFiles();\n    }\n\n    componentWillUnmount() {\n        const {clearOnUnmount} = this.props;\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    notifyFileChange = () => {\n        const {onChange} = this.props;\n        const {fileObjects} = this.state;\n\n        if (onChange) {\n            onChange(fileObjects.map((fileObject) => fileObject.file));\n        }\n    }\n\n    loadInitialFiles = async() => {\n        const {initialFiles} = this.props;\n        try {\n            const fileObjs = await Promise.all(\n                initialFiles.map(async(url) => {\n                    const file = await createFileFromUrl(url);\n                    const data = await readFile(file);\n\n                    return {\n                        file,\n                        data,\n                    };\n                })\n            );\n\n            this.setState((state) => ({\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    fileObjs\n                ),\n            }), this.notifyFileChange);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    addFiles = async(newFileObjects) => {\n        const {filesLimit} = this.props;\n        // Update component state\n        this.setState((state) => {\n            // Handle a single file\n            if (filesLimit <= 1) {\n                return {\n                    fileObjects: [].concat(newFileObjects[0]),\n                };\n            }\n\n            // Handle multiple files\n            return {\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    newFileObjects\n                ),\n            };\n        }, this.notifyFileChange);\n    }\n\n    deleteFile = (removedFileObj, removedFileObjIdx) => {\n        event.stopPropagation();\n\n        const {onDelete} = this.props;\n        const {fileObjects} = this.state;\n\n        // Calculate remaining fileObjects array\n        const remainingFileObjs = fileObjects.filter((fileObject, i) => {\n            return i !== removedFileObjIdx;\n        });\n\n        // Notify removed file\n        if (onDelete) {\n            onDelete(removedFileObj.file);\n        }\n\n        // Update local state\n        this.setState({\n            fileObjects: remainingFileObjs,\n        }, this.notifyFileChange);\n    }\n\n    render() {\n        const [, dropzoneAreaProps] = splitDropzoneAreaProps(this.props);\n        const {fileObjects} = this.state;\n\n        return (\n            <DropzoneAreaBase\n                {...dropzoneAreaProps}\n                fileObjects={fileObjects}\n                onAdd={this.addFiles}\n                onDelete={this.deleteFile}\n            />\n        );\n    }\n}\n\nDropzoneArea.defaultProps = {\n    clearOnUnmount: true,\n    filesLimit: 3,\n    initialFiles: [],\n};\n\nDropzoneArea.propTypes = {\n    ...DropzoneAreaBase.propTypes,\n    /** Clear uploaded files when component is unmounted. */\n    clearOnUnmount: PropTypes.bool,\n    /** List of URLs of already uploaded images.<br/>**Note:** Please take care of CORS. */\n    initialFiles: PropTypes.arrayOf(PropTypes.string),\n    /** Maximum number of files that can be loaded into the dropzone. */\n    filesLimit: PropTypes.number,\n    /**\n     * Fired when the files inside dropzone change.\n     *\n     * @param {File[]} loadedFiles All the files currently loaded into the dropzone.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Fired when a file is deleted from the previews panel.\n     *\n     * @param {File} deletedFile The file that was removed.\n     */\n    onDelete: PropTypes.func,\n};\n\nexport default DropzoneArea;\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport DropzoneAreaBase from './DropzoneAreaBase';\n\n// Split props related to DropzoneDialog from DropzoneArea ones\nfunction splitDropzoneDialogProps(allProps) {\n    const {\n        cancelButtonText,\n        dialogProps,\n        dialogTitle,\n        fullWidth,\n        maxWidth,\n        onClose,\n        onSave,\n        open,\n        submitButtonText,\n        ...dropzoneAreaProps\n    } = allProps;\n\n    return [\n        {\n            cancelButtonText,\n            dialogProps,\n            dialogTitle,\n            fullWidth,\n            maxWidth,\n            onClose,\n            onSave,\n            open,\n            submitButtonText,\n        },\n        dropzoneAreaProps,\n    ];\n}\n\n/**\n * This component provides the DropzoneArea inside of a Material-UI Dialog.\n *\n * It supports all the Props and Methods from `DropzoneAreaBase`.\n */\nclass DropzoneDialogBase extends React.PureComponent {\n    render() {\n        const [dropzoneDialogProps, dropzoneAreaProps] = splitDropzoneDialogProps(this.props);\n        const {\n            cancelButtonText,\n            dialogProps,\n            dialogTitle,\n            fullWidth,\n            maxWidth,\n            onClose,\n            onSave,\n            open,\n            submitButtonText,\n        } = dropzoneDialogProps;\n\n        // Submit button state\n        const submitDisabled = dropzoneAreaProps.fileObjects.length === 0;\n\n        return (\n            <Dialog\n                {...dialogProps}\n                fullWidth={fullWidth}\n                maxWidth={maxWidth}\n                onClose={onClose}\n                open={open}\n            >\n                <DialogTitle>{dialogTitle}</DialogTitle>\n\n                <DialogContent>\n                    <DropzoneAreaBase\n                        {...dropzoneAreaProps}\n                    />\n                </DialogContent>\n\n                <DialogActions>\n                    <Button\n                        color=\"primary\"\n                        onClick={onClose}\n                    >\n                        {cancelButtonText}\n                    </Button>\n\n                    <Button\n                        color=\"primary\"\n                        disabled={submitDisabled}\n                        onClick={onSave}\n                    >\n                        {submitButtonText}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nDropzoneDialogBase.defaultProps = {\n    open: false,\n    dialogTitle: 'Upload file',\n    dialogProps: {},\n    fullWidth: true,\n    maxWidth: 'sm',\n    cancelButtonText: 'Cancel',\n    submitButtonText: 'Submit',\n    showPreviews: true,\n    showPreviewsInDropzone: false,\n    showFileNamesInPreview: true,\n};\n\nDropzoneDialogBase.propTypes = {\n    ...DropzoneAreaBase.propTypes,\n    /** Sets whether the dialog is open or closed. */\n    open: PropTypes.bool,\n    /** The Dialog title. */\n    dialogTitle: PropTypes.string,\n    /**\n     * Props to pass to the Material-UI Dialog components.\n     * @see See [Material-UI Dialog](https://material-ui.com/api/dialog/#props) for available values.\n     */\n    dialogProps: PropTypes.object,\n    /**\n     * If `true`, the dialog stretches to `maxWidth`.<br/>\n     * Notice that the dialog width grow is limited by the default margin.\n     */\n    fullWidth: PropTypes.bool,\n    /**\n     * Determine the max-width of the dialog. The dialog width grows with the size of the screen.<br/>\n     * Set to `false` to disable `maxWidth`.\n     */\n    maxWidth: PropTypes.string,\n    /** Cancel button text in dialog. */\n    cancelButtonText: PropTypes.string,\n    /** Submit button text in dialog. */\n    submitButtonText: PropTypes.string,\n    /**\n     * Fired when the modal is closed.\n     *\n     * @param {SyntheticEvent} event The react `SyntheticEvent`\n     */\n    onClose: PropTypes.func,\n    /**\n     * Fired when the user clicks the Submit button.\n     *\n     * @param {SyntheticEvent} event The react `SyntheticEvent`\n     */\n    onSave: PropTypes.func,\n    /**\n     * Shows previews **BELOW** the dropzone.<br/>\n     * **Note:** By default previews show up under in the Dialog and inside in the standalone.\n     */\n    showPreviews: PropTypes.bool,\n    /** Shows preview **INSIDE** the dropzone area. */\n    showPreviewsInDropzone: PropTypes.bool,\n    /** Shows file name under the image. */\n    showFileNamesInPreview: PropTypes.bool,\n};\n\nexport default DropzoneDialogBase;\n","import PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {createFileFromUrl, readFile} from '../helpers';\n\nimport DropzoneDialogBase from './DropzoneDialogBase';\n\n\n/**\n * This component provides an uncontrolled version of the DropzoneDialogBase component.\n *\n * It supports all the Props and Methods from `DropzoneDialogBase` but keeps the files state internally.\n *\n * **Note** The `onSave` handler also returns `File[]` with all the accepted files.\n */\nclass DropzoneDialog extends React.PureComponent {\n    state = {\n        fileObjects: [],\n    }\n\n    componentDidMount() {\n        this.loadInitialFiles();\n    }\n\n    componentWillUnmount() {\n        const {clearOnUnmount} = this.props;\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    notifyFileChange = () => {\n        const {onChange} = this.props;\n        const {fileObjects} = this.state;\n\n        if (onChange) {\n            onChange(fileObjects.map((fileObject) => fileObject.file));\n        }\n    }\n\n    loadInitialFiles = async() => {\n        const {initialFiles} = this.props;\n        try {\n            const fileObjs = await Promise.all(\n                initialFiles.map(async(url) => {\n                    const file = await createFileFromUrl(url);\n                    const data = await readFile(file);\n\n                    return {\n                        file,\n                        data,\n                    };\n                })\n            );\n\n            this.setState((state) => ({\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    fileObjs\n                ),\n            }), this.notifyFileChange);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    addFiles = async(newFileObjects) => {\n        const {filesLimit} = this.props;\n        // Update component state\n        this.setState((state) => {\n            // Handle a single file\n            if (filesLimit <= 1) {\n                return {\n                    fileObjects: [].concat(newFileObjects[0]),\n                };\n            }\n\n            // Handle multiple files\n            return {\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    newFileObjects\n                ),\n            };\n        }, this.notifyFileChange);\n    }\n\n    deleteFile = (removedFileObj, removedFileObjIdx) => {\n        event.stopPropagation();\n\n        const {onDelete} = this.props;\n        const {fileObjects} = this.state;\n\n        // Calculate remaining fileObjects array\n        const remainingFileObjs = fileObjects.filter((fileObject, i) => {\n            return i !== removedFileObjIdx;\n        });\n\n        // Notify removed file\n        if (onDelete) {\n            onDelete(removedFileObj.file);\n        }\n\n        // Update local state\n        this.setState({\n            fileObjects: remainingFileObjs,\n        }, this.notifyFileChange);\n    }\n\n    handleClose = (evt) => {\n        const {clearOnUnmount, onClose} = this.props;\n\n        if (onClose) {\n            onClose(evt);\n        }\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    handleSave = (evt) => {\n        const {clearOnUnmount, onSave} = this.props;\n        const {fileObjects} = this.state;\n\n        if (onSave) {\n            onSave(fileObjects.map((fileObject) => fileObject.file), evt);\n        }\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    render() {\n        const {fileObjects} = this.state;\n\n        return (\n            <DropzoneDialogBase\n                {...this.props}\n                fileObjects={fileObjects}\n                onAdd={this.addFiles}\n                onDelete={this.deleteFile}\n                onClose={this.handleClose}\n                onSave={this.handleSave}\n            />\n        );\n    }\n}\n\nDropzoneDialog.defaultProps = {\n    clearOnUnmount: true,\n    filesLimit: 3,\n    initialFiles: [],\n};\n\nDropzoneDialog.propTypes = {\n    ...DropzoneDialogBase.propTypes,\n    /** Clear uploaded files when component is unmounted. */\n    clearOnUnmount: PropTypes.bool,\n    /** Maximum number of files that can be loaded into the dropzone. */\n    filesLimit: PropTypes.number,\n    /** List of URLs of already uploaded images.<br/>**Note:** Please take care of CORS. */\n    initialFiles: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * Fired when the user clicks the Submit button.\n     *\n     * @param {File[]} files All the files currently inside the Dropzone.\n     * @param {SyntheticEvent} event The react `SyntheticEvent`.\n     */\n    onSave: PropTypes.func,\n};\n\nexport default DropzoneDialog;\n"]},"metadata":{},"sourceType":"module"}